  
USMAN  INSTITUTE  OF TECHNOLOGY  
Affiliated  with NED  University  of Engineering  & Technology,  Karachi  
 
Department  of Computer  Science  
B.S. Software Engineering 
FINAL  YEAR  PROJECT  REPORT  
Batch -2021  
 
ATHESTIA  
Clean  slate  application  using  Named  Data  Network  with Dilithium 
to enhance security in future internet technology  
 
 
By 
 
 HAFSA  SHOAIB  21B-054-SE 
 Muhammad  Asfiyan  21B-111-SE 
 Muhammad  Amir  Jawed  21B-211-SE 
 Muhammad  Latif     21B-029-SE 
 
Supervised  by 
Dr. Farhan  Ahmed  Karim  
 
ST-13, Block  7, Gulshan -e-Iqbal,  Abul  Hasan  Isphahani  Road,  Opposite  Safari  Park,  P.O. Box 75300, 
Karachi, Pakistan.

Phone: 34978274 -5; 34994305; 34982476; http://www.uit.edu  

Submission  Performa  
 
Name  (1) .......................  HAFSA  SHOAIB  
hafsashoaib989@gmail.com  
0332 -2217868  
(2) ........................  Muhammad  Asfiyan  
asfiyanshivani0321@gmail.com  
0321 -2904274  
(3) ........................  Muhammad  Amir  Jawed  
amirjaved040@gmail.com  
0327 -2471748  
(4) ........................  Muhammad  Latif 
moha mmadlatif786785@gmail.com  
03032595932  
 
 
Address  (1) ......................  (House  No: A-44, Block  7, Saadi  Town)  
(2) ........................  (44/2,  N lane,  phase  4, Near  Imambargah)  
(3) ........................  (Flat#405,  4th Floor,  Rabia  Palace,  Kharadar)  
(4) ........................  (Near  Bukhari  Masjid  , Azad  Muhallah,  Kemari  Town)  
 
 
  
i  ATHESTIA  - Clean  slate application  using  Named  Data Network  with Dilithium  to enhance  security 
in future internet technology  
 
Dr. Farhan  Ahmed  Karim  Signature  
 
 
 
 
This report  is submitted  as required  for the Project  in accordance  with the rules  laid down  by the Usman 
Institute  of technology as part of  the requirements for the award of the degree of Bachelor Software 
Engineering . I declare  that the work  presented  in this report  is my own except  where  due reference  or 
acknowledgement is given to the work of others. Signatures  of students  Date 
 
 
(1) ……………………………..  ……30 -05-2025……  
(2) ……………………………. ……30 -05-2025……  
(3) ……………………………..  ……30 -05-2025……  
(4) ……………………………..  ……30 -05-2025……  
 
 
 
.

ii  Acknowledgments  
 
First, we would like to thank Allah for granting us strength , perseverance, and wisdom to 
successfully complete our Final Year Project (FYP). Without His endless blessings, this 
accomplishment would not have been possible. Our heartfelt  gratitude  goes to our supervisor,  Dr. Farhan  Ahmed  Karim,  for his exceptional  guidance, 
constant  support,  and insightful  feedback  throughout  this journey. His expertise  has been  instrumental 
in shaping the direction and success of our research. We are also sincerely  thankful  to our dedicated  team  members for their collaboration, hard  work,  and 
commitment throughout the development of Athestia. Each member's contribution was vital to the 
progress and completion of this project. A special  note of appreciation  goes to our famili es and friends for  their unwavering  support,  patience, 
and encouragement during the most challenging phases of this project. Their belief in us has been a 
source of constant motivation. Lastly,  we extend  our gratitude  to everyone  who contributed  directly  or indirectly  to the completion  of 
this project. We hope that our efforts through Athestia serve as a meaningful addition to the field of 
secure networking technologies.

iii  Abstract  
 
This project focuses on developing a quantum -safe digital signature solution using the post -quantum 
Module -Lattice -Based Digital Signature Standard algorithm (named as Dilithium), a lattice -based 
cryptographic method designed to withstand quantum computing threats. This project involves the 
designing  of a hardware  accelerator  for the Dilithium  digital  signature  operations  using  SystemVerilog. To simulate  the working of  Dilithium, we integrate  it with  the Named Data Network. Hence, the plan 
is to utilize the MiniNDN Framework which provides a l ightweight simulation environment for NDN  
Network. Hence,  we modify  the NDN  self-certification  process  using  Dilithium. The project was  
undertaken  by initially  implementing  and testing  the cryptographic functions  in Python, followed by 
the hardware design using SystemVerilog. The Dilithium accelerator is ported onto Field 
Programmable Gate Array (FPGA) platforms, which enables efficient key generation, signature 
creation, and verification operations. Communication bet ween the FPGA and the miniNDN is 
facilitated through the UART protocol. Extensive testing is conducted to validate the performance 
and security of the system, confirming that it meets post -quantum cryptographic standards. The 
outcome of this project  demons trates the feasibility of integrating post -quantum cryptographic 
accelerators within NDN, significantly improving the security of communication.

Keywords : Dilithium, post -quantum cryptography, Named Data Networking, hardware accelerator, 
digital signature s, quantum -safe, cryptography  
 
iv  Table  of contents  
 
            Submission  Performa  ................................ ................................ ................................ ..........................  i 
            Acknowledgments  ................................ ................................ ................................ ..............................  ii 
            Abstract  ................................ ................................ ................................ ................................ .............  iii 
List of figures  ................................ ................................ ................................ ................................ ... vii 
List of tables  ................................ ................................ ................................ ................................ .... viii 
1. Introduction  ................................ ................................ ................................ ................................ .... 1 
1.1. Introduction  ................................ ................................ ................................ .............................  1 
1.2. Project  Overview  and Functionality  ................................ ................................ .......................  1 
1.3. Relationship  with  Sustainable  Development  Goals  (SDGs)  ................................ ....................  4 
1.4. Project  Breakdown  ................................ ................................ ................................ ..................  5 
2. Background  and Literature  Review  ................................ ................................ ...............................  6 
2.1 Background  ................................ ................................ ................................ .............................  6 
2.2 Similar  Applications  ................................ ................................ ................................ ................  7 
2.2.1. RSA -Based  Authentication  in NDN  ................................ ................................ ...............................  7 
2.2.2  ECC  Integration  in Network  Security  ................................ ................................ ............................  7 
2.2.3.  AES  in NDN  Data  Encryption  ................................ ................................ ................................ ....... 7 
2.3. Algorithms  ................................ ................................ ................................ ...............................  8 
2.3.1. Dilithium  Algorithms ................................ ................................ ................................ .....................  8 
2.3.2. Why Choose  Dilithium  for Athestia? ................................ ................................ .............................  9 
 
            3. Aim and Statement  of Problem  ................................ ................................ ................................ .... 11 
3.1.

Statement  of the Problem  ................................ ................................ ................................ ...... 11 
3.1.1. Cryptographic  Vulnerabilities  to Quantum  Computing  ................................ ................................ 11 
3.1.2. Challenges  in Secure  Data  Distribution  with Named  Data Networking (NDN)  ............................ 12 
3.2. Scope  and Stakeholders  ................................ ................................ ................................ .........  12 
3.2.1. Researchers  and Developers  ................................ ................................ ................................ ......... 12 
3.2.2. End Users  ................................ ................................ ................................ ................................ .....12 
3.3 Approach  to Tackling  the Problem  ................................ ................................ .......................  13 
3.3.1. Integration  of Dilithium  for Secure  Authentication  ................................ ................................ ......13 
4. Hardware,  Software  analysis  and requirements  ................................ ................................ ..........  14 
4.1. Fact-Finding  Techniques  ................................ ................................ ................................ ....... 14 
4.2. Hardware  Analysis  and Requirements  ................................ ................................ .................  14 
4.2.1. Xilinx  Zynq -7000  SoC ................................ ................................ ................................ .................. 14 
4.2.2. Intel  (Altera)  Cyclone  V FPGA  ................................ ................................ ................................ .....14 
4.2.3. Arty-7 FPGA  (Chosen)  ................................ ................................ ................................ ................. 14 
4.3. Software  Analysis  and Requirements  ................................ ................................ ...................  15 
4.4. System  Structure  ................................ ................................ ................................ ...................  15 
4.4.1. Actor  Use Case  Diagram  ................................ ................................ ................................ .............. 18 
4.4.3. Operational  Diagram ................................ ................................ ................................ ......................... 23 
4.5. Requirements ................................ ................................ ................................ .........................  25 
 
v  4.5.1. Functional  Requirements  ................................ ................................ ................................ ............. 25 
4.5.2. Non-Functional  Requirements  ................................ ................................ ................................ .....26 
5.

Software  design  and modeling  ................................ ................................ ................................ ...... 27 
5.1. Project  Architecture  ................................ ................................ ................................ ..............  27 
5.1.1. Main  Components:  ................................ ................................ ................................ ....................... 27 
5.1.2. Key Features  of Architecture:  ................................ ................................ ................................ .......28 
5.2. Architecture  Used:  ................................ ................................ ................................ ................  28 
5.2.1. Hardware  Layer  ................................ ................................ ................................ ........................... 29 
5.2.2. Middleware  Layer ................................ ................................ ................................ ......................... 29 
5.3. Design  Diagrams:  ................................ ................................ ................................ ..................  30 
5.3.1. Object  Diagram  ................................ ................................ ................................ ............................ 30 
The object diagram provides a snapshot of the system at runtime, focusing on the objects involved  .......... 30 
and their relationships during operation. ................................ ................................ ................................ ...30 
5.3.2. Class  Diagram  ................................ ................................ ................................ .............................. 32 
5.4. Behavioral  Diagrams  ................................ ................................ ................................ .............  34 
5.4.1. Sequence  Diagram  ................................ ................................ ................................ ....................... 35 
5.5. User  Interface  Design  ................................ ................................ ................................ ............  36 
6. Algorithm  analysis  and complexity  ................................ ................................ ..............................  40 
6.1. Introduction  ................................ ................................ ................................ ...........................  40 
6.2. Dilithium  Algorithms ................................ ................................ ................................ .............  40 
6.2.1. Purpose  and Significance  ................................ ................................ ................................ ............. 40 
6.2.2. Pseudocode  and Operation  ................................ ................................ ................................ ........... 41 
6.3. COMPLEXITY  ANALYSIS  AND  OPTIMIZATION  ................................ .........................  45 
6.3.1. Time  Complexity  ................................ ................................ ................................ .......................... 45 
6.3.2.

Space  Complexity  ................................ ................................ ................................ ......................... 46 
6.4. Discussion  ................................ ................................ ................................ ..............................  46 
7. Implementation  ................................ ................................ ................................ .............................  47 
7.1. CODE  ................................ ................................ ................................ ................................ .... 47 
7.1.1.  main.py  ................................ ................................ ................................ ................................ ........ 47 
7.1.2. Key_internal.sv  ................................ ................................ ................................ ............................. 47 
7.2. Component  Diagram  ................................ ................................ ................................ .............  52 
7.3 Deployment  Diagram  ................................ ................................ ................................ ............  54 
8. Testing  ................................ ................................ ................................ ................................ ...........  56 
8.1. TESTING  METHODS  ................................ ................................ ................................ ..........  56 
8.1.1. White -box testing:  ................................ ................................ ................................ ........................ 56 
8.1.2. Black -box testing  ................................ ................................ ................................ .......................... 60 
9. Discussion  ................................ ................................ ................................ ................................ ...... 63 
9.1. Core  Contributions  and Impact  ................................ ................................ ............................  63 
9.2. Technical  Feasibility  and Evaluation  ................................ ................................ ....................  63 
9.3. System  Integration  and Interoperability ................................ ................................ ...............  63 
9.4. Challenges  Faced  ................................ ................................ ................................ ...................  64 
10. Conclusion  ................................ ................................ ................................ .............................  65 
 
vi  11. Future  Work  ................................ ................................ ................................ ..........................  66 
11.1. Integration  of Kyber  for Secure  Key Exchange ................................ .............................  66 
11.2. Real -World  Deployment  and Evaluation  ................................ ................................ ....... 66 
12. Achievement  ................................ ................................ ................................ ..........................  67 
13.

Appendic es................................ ................................ ................................ .............................  68 
References  ................................ ................................ ................................ ................................ ........  72 
 
 
vii  List of figures  
 
Figure  1.1 System  Diagram  of Athestia  ................................ ................................ ............  2 
Figure  4.2 Actor Use Case Diagram  ................................ ................................ .................  18 
Figure  4.3 Activity Swim Lane Diagram of Athestia  ................................ ........................  20 
Figure  4.4 Operational Diagram  ................................ ................................ .......................  23 
Figure  5.1 Object  Diagram  ................................ ................................ ................................ 31 
Figure  5.2 Class  Diagram  ................................ ................................ ................................ ..32 
Figure  5.3 Sequence  Diagram  ................................ ................................ ..........................  35 
Figure  5.5 User  Interface  Design  Layout  ................................ ................................ .........   36 
Figure  7.1 Component  Diagram  ................................ ................................ .......................   52 
Figure  7.2 Deployment  Diagram  ................................ ................................ ......................   54 
 
viii  List of tables  
Table  2.1 Comparison  Table  of Existing Solutions  ................................ ..............................  08 
Table  8.1.1.1  Unit Testing. ................................ ................................ ................................ ...... 57 
Table  8.1.1.2  Integration  Testing. ................................ ................................ ............................  59 
Table  8.1.1.3  System  Testing. ................................ ................................ ................................ . 60 
Table  8.1.2  Black -box Testing.

................................ ................................ .............................  61 
 
ix  List of symbols  and Units  
 
Notation  Symbol  Description  
Class  Rectangle  Represents  a class  with attributes  and methods  
Object  Rectangle  with name  Instance  of a class 
Actor  Stick  figure  External  entity  that interacts with  the system  
Use Case  Oval  Describes  a system  function  or service  
Association  Solid line Connection between actor and use case or between 
classes  
Dependency  Dashed  arrow  One element  depends  on another  
Generalization  Solid  arrow  with 
hollow triangle  Shows  inheritance  between  classes  
Aggregation  Hollow  diamond  A whole -part relationship  where  part can exist 
independently  
Composition  Solid  diamond  A strong  whole -part relationship  (part  cannot  exist 
without whole)  
Sequence  Diagram 
Lifeline  Vertical  dashed  line Represents  the time span during  which  an object 
exists  
Message  Call Solid  arrow  Represents  a message  sent from  one object  to another  
Return Message  Dashed  arrow  Represents  the return  of control/data  after a call 
Component  Rectangle  with tabs Represents  modular  part of a system  (e.g.,  FPGA 
module, NDN emulator)  
Interface 
(Realization)  Lollipop  symbol  Shows  the provided  interface  of a component  
Deployment  Node  Cube  Represents  a physical  hardware  or environment 
where components are deployed  
Artifact  Document  symbol  Represents  a software  artifact  (like code,  libraries) 
deployed on a node  
Package  Tabbed  folder icon Groups  related  UML  elements  into a single 
namespace .

1  1. Introduction  
 
1.1. Introduction  
The rapid  advancements  in quantum  computing  present  a significant  threat  to traditional  cryptographic 
systems, which rely on mathematical problems that quantum algorithms can potentially solve 
efficiently. Algorithms like RSA and ECC, which have been widely used to secure communications 
for decades,  are at risk of being  compromise d by quantum  computers [1]. This project,  titled  Athestia , 
addresses these emerging threats by designing a quantum -safe digital signature solution using 
Dilithium, a lattice -based digital signature algorithm, has been selected by the National Institute of 
Standards and Technology (NIST) for post -quantum cryptogr aphy standardization due to its strong 
foundations, which rely on difficult computational problems in lattice cryptography. Lattice -based 
schemes, such as Dilithium, provide security by solving complex mathematical problems like the 
Shortest Vector Problem  (SVP) and the Learning with Errors (LWE) problem, which are 
computationally infeasible to solve efficiently, even with the capabilities of quantum computers. Named Data Networking (NDN), an  emerging data -centric communication model, changes  the focus 
of network communication from the location of data (IP addresses) to the content itself.

NDN 
inherently  provides  efficient  data distribution  by caching  data within  the network,  reducing  server  load 
and speeding up data access. The project involves the designing of a hardware accelerator for the Dilithium digital signature 
operations,  flashed  on FPGA  platforms;  to simulate  the working  of Dilithium,  we integrate  it with the  
NDN  Network. Hence,  the plan is to utilize  the MiniNDN  Framework  which  provides  a lightweight 
simulation  environment  for NDN  Network. So, we are modifying  the self-certification  process  of NDN 
with Dilithium to enhance security. The goal is to develop a secure cryptographic framework that is 
resistant to quant um attacks. 1.2. Project  Overview  and Functionality  
The primary function of this project is to develop a hardware accelerator for the Dilithium digital 
signature  operations. This accelerator  is designed  to perform  key generation,  signature,  and verification 
operations, all  of which  are fundamental  for secure  communication  in the face  of quantum  threats. By 
porting the Dilithium accelerator onto FPGA platforms, the project aims to ensure both security and 
 
2  efficiency in digital communications, enhancing the sys tem's performance compared to purely 
software -based implementations.

Figure  1.1 System  Diagram  of Athestia  
 
Figure  1.1 illustrates  the architecture  and interaction  between  the miniNDN  (Named  Data  Networking) 
framework  and the Dilithium  Accelerator  to ensure  secure  and efficient communication  through  post- 
quantum cryptographic methods. 3  ● MiniNDN  Framework:  
a. The NDN framework  is depicted  with Producers, Consumers, and  Routers  that facilitate 
the exchange of data packets. b. The Certificate Authority  (CA) issues  certificates  to secure network  interactions. Data 
packets travel through routers, allowing consumers to retrieve information from 
producers. ● UART  Protocol:  
a. The Universal  Asynchronous  Receiver -Transmitter  (UART)  protocol  is used to bridge 
communication between the miniNDN framework and the Dilithium Accelerator, 
enabling data exchange for cryptographic operations. ● Dilithium  Accelerator:  
a. The Dilithium  Accelerator  performs  critical  cryptographic  operations  such as key 
generation, signing, and verification of data packets. i. Decoder:  Decodes  incoming  requests  or data packets  from  the miniNDN  
framework. ii. Memory  Controller:  Manages  the memory  operations  required  for 
cryptographic key storage and retrieval. iii. Control  Unit:  Direc ts the overall  operation  of the accelerator,  coordinating  tasks 
like key generation, signing, and verifying. ● Cryptographic  Operations:  
a. Key Generation:  Produces  public  and private  keys for signature  and verification. b.

Signature:  The signature  unit signs  data packets  to guarantee  integrity  and authenticity. c. Verifier:  Verifies  signatures  using  public  keys to ensure  data authenticity  and security. This architecture demonstrates the seamless integration of  the Dilithium  post-quantum  cryptographic 
accelerator with the miniNDN framework, ensuring robust security for future network 
communications. 4  1.3. Relationship  with  Sustainable  Development  Goals  (SDGs)  
This project contributes directly to Goal 9: Industry, Innovation,  and Infrastructure of the 17 
Sustainable Development Goals (SDGs) established by the United Nations. Goal 9 emphasizes the 
importance of building resilient infrastructure, promoting inclusive and sustainable industrialization, 
and fostering innovation. In  the era of rapid technological advancement and increasing global 
interconnectivity, cybersecurity has become a fundamental component of sustainable digital 
infrastructure. The implementation of Athestia, which integrates Dilithium, a post -quantum cryptog raphic digital 
signature algorithm, within the Named Data Networking (NDN) framework, directly addresses the 
emerging need for secure and future -proof communication systems. The threat posed by quantum 
computing to traditional encryption methods, such as R SA and ECC, is well documented. By 
proactively developing a quantum -resistant cryptographic solution, this project safeguards critical 
communication  channels against future quantum -based threats, ensuring the long -term resilience and 
reliability of digital  systems.

Furthermore,  this project encourages  technological innovation  by introducing clean -slate architecture 
through NDN, which itself is a revolutionary shift from traditional IP -based communication models. By focusing  on content  rather  than location,  NDN  offers  a more  efficient  and secure  data transmission 
approach. Integrating this model with post -quantum security mechanisms not only protects 
information but also opens doors for next -generation internet architecture, making this project a 
cornerstone  in the evolution of secure, intelligent, and scalable digital infrastructures. From an industrial perspective, the design and implementation of a hardware -based cryptographic 
accelerator using FPGA technology contributes to the advancement of secure embe dded systems. These systems can be utilized across a wide range of sectors, including finance, healthcare, defense, 
and telecommunications, where data security is paramount. By ensuring that such systems are 
quantum -safe, the project  helps  industries  futur e-proof  their technologies,  thereby  fostering  sustainable 
industrial growth aligned with SDG targets. 5  1.4. Project  Breakdown  
The project  has been divided into several  subprojects:  
 
1. Designing of a hardware accelerator for the Dilithium  digital signature operations using 
SystemVerilog, which includes key generation, signature, and verification algorithms. 2. Port the Dilithium  accelerator  onto Field  Programmable  Gate  Array  (FPGA) platforms. 3.

Integrate the Dilithium  accelerator with the NDN Network. Hence, the plan is to utilize the 
MiniNDN Framework which provides a lightweight simulation environment for NDN 
Network. 4. Perform  testing  to ensure  the algorithms  are implemented  according  to the standard. 6  2. Background  and Literature  Review  
 
2.1 Background  
The rapid  evolution  of internet  technologies has  prompted  a paradigm  shift from  traditional, location - 
based communication models to data -centric architecture such as Named Data Networking (NDN). NDN  redefines how  content is  requested  and delivered  over the internet by  focusing  on the data itself 
rather  than its location. This emerging  approach  enhances  efficiency  and security,  positioning  NDN  as 
a potential  foundation  for the future  of the internet. However,  as technology  progresses,  new challenges 
arise, particularly in the realm of security. The rise of quantum computing presents a significant threat to current cryptographic systems, 
especially  widely  used algorithms like  RSA  and ECC, whi ch are susceptible  to quantum  attacks. This 
threat has led to the development of post -quantum cryptography, a new stream of cryptography that 
can withstand the computational power of quantum computers.

Among these, lattice -based 
cryptographic algorithms, s uch as Dilithium, have emerged as promising candidates for secure 
communication in a post -quantum world. The project ATHESTIA is grounded in the integration of post -quantum cryptographic techniques 
within NDN to secure data communication against future quantum threats. The project has evolved 
from early explorations into NDN’s potential for secure networking,  now focused on incorporating 
Dilithium to provide quantum -safe authentication and integrity in NDN environments. The current 
state of the project involves experimenting with the integration of  Dilithium into NDN and assessing 
the feasibility of this solut ion through MiniNDN emulator and Dilithium accelerator to ensure real - 
world applicability. This project aims to address the imminent security vulnerabilities posed by quantum computing, 
making  NDN  more  resilient  and future -proof. Through  ATHESTIA,  we aim to offer  a secure  solution, 
paving the way for post -quantum internet communication. 7  2.2 Similar  Applications  
While Named Data Networking (NDN) represents a forward -thinking architecture for internet 
communications, many of the security solutions currently  deployed in NDN and similar systems are  
based on traditional cryptographic techniques.

These approaches are effective in classical computing  
environments but exhibit vulnerabilities when faced with the computational capabilities of quantum 
computers. Seve ral similar  applications  have emerged,  leveraging  a range  of cryptographic  strategies, 
technologies, and methodologies. Key existing solutions [2] include:  
2.2.1. RSA -Based  Authentication  in NDN  
One of the most common security implementations in NDN is RSA -based digital signatures for 
authentication and data integrity. RSA's primary strength lies in its robustness against traditional 
cryptographic attacks. However, its reliance on the difficulty of factoring large numbers renders it 
vulnerable to quantum attacks. Specifically, Shor’s algorithm can break RSA encryption, making it 
inadequate for post -quantum security requirements. This limitation is a key reason why RSA -based 
authentication systems are under scrutiny as quantum threats become more imminent. 2.2.2 ECC  Integration  in Network  Security  
Another widely implemented technology is Elliptic Curve Cryptography (ECC), used across many 
NDN applications and broader network security systems. ECC offers stronger security with shorter 
key lengths  compared  to RSA,  makin g it more  efficient  in terms  of computation  and bandwidth  usage. However, like  RSA, ECC  is also vulnerable  to quantum  attacks.

Quantum  algorithms, such  as Shor’s, 
can efficiently  solve mathematical  problems  underpinning  ECC,  meaning it cannot  provide long-term 
security in the presence of quantum computing capabilities. 2.2.3.  AES  in NDN  Data  Encryption  
The Advanced  Encryption  Standard  (AES)  is extensively  used for encrypting  data across  various  layers 
of network protocols, including NDN. AES has shown resilie nce against certain types of quantum 
attacks, specifically Grover’s algorithm, which reduces the effective key length by half. However, to 
remain secure in a post -quantum world, AES requires significantly larger key lengths (e.g., shifting 
from 128 -bit key s to 256 -bit keys), which could negatively impact performance, particularly in 
resource -constrained environments like IoT and lightweight NDN nodes  
 
8   
Table  2.1 Comparison  Table  of Existing  Solutions  
 
Technology  / 
Application  Purpose  Strength  Limitations  
RSA -Based 
Authentication  in 
NDN  Provides  authentication 
and data integrity via 
digital signatures. - Well -established 
with widespread 
adoption. - Strong  protection  in 
classical 
environments. - Vulnerable  to quantum 
attacks (Shor’s 
algorithm). - Requires  large  key 
sizes, impacting 
performance. ECC  Integration  in 
Network Security  Secures network 
communication  with 
shorter key lengths. - Provides higher 
security  with smaller 
keys than RSA. - More efficient in 
terms of 
computational  cost.

- Susceptible  to quantum 
attacks (Shor's 
algorithm). - Inadequate  for future 
post-quantum  security. AES  in NDN  Data 
Encryption  Encrypts data across 
various  layers  in NDN  to 
ensure confidentiality. - Resistant  to classical 
attacks. - Partially  resilient  to 
quantum attacks 
(Grover’s  algorithm). - Requires  key length 
scaling for quantum 
resistance, affecting 
performance. 2.3. Algorithms  
In the context of Named Data Networking (NDN) and post -quantum cryptography, Athestia is built 
upon the Dilithium  algorithm, a lattice -based digital signature scheme. Below is a breakdown of 
Dilithium  algorithms and a comparison  with other traditional  algorithms used in  similar applications. 2.3.1. Dilithium  Algorithms  
The three  Dilithium  algorithms  are as follows:  
2.3.1.1. Key Generation:  
○ The Dilithium  algorithm  generates  a pair of keys:  a private  key for signing  and a public 
key for verification. ○ This key generation process relies on lattice -based mathematical problems, making it 
resistant to quantum attacks. 9  2.3.1.2. Signature  
○ The signing  process  uses the private  key to create  a digital  signature  for a given 
message. The signature  ensures  the message’s  authenticity  and integrity  in the network. 2.3.1.3.

Verification  
○ The public  key is used to verify  the digital  signature,  ensuring  that the message  has not 
been altered and was signed by the legitimate party. 2.3.2. Why  Choose  Dilithium  for Athestia? ● Quantum  Resistance : Unlike  traditional  cryptographic  schemes  like RSA  and ECC,  Dilithium 
is built on lattice -based  cryptography,  which  is resistant  to quantum  algorithms  such as Shor's. This makes it highly suitable for future proofing against quantum threats. ● Efficiency : Dilithium  offers a good balance between performance and security, providing 
efficient key generation, signing, and verification processes, which are crucial in real -time 
NDN applications. ● Standardization : Dilithium  has been chosen as a finalist in the NIST Post -Quantum 
Cryptography Standardization process, which indicates its potential to become a widely 
adopted standard for securing data in the quantum computing era. 2.3.3. Algorithms  in Similar  Applications:  
To better u nderstand the advantages and motivation behind choosing Dilithium for post -quantum 
security  in Athestia, it is important  to analyze  cryptographic  algorithms  used in  existing  systems  with 
similar goals. The following subsections discuss widely adopted class ical algorithms that have been 
implemented  in Named  Data  Networking  (NDN)  and general  network  security  systems.

These  include 
RSA, ECC, and AES, each of which offers different security properties and performance 
characteristics but faces limitations in a q uantum computing context. We examine how these 
algorithms  operate,  their common  use cases, and  why they may fall short  when  facing  future  quantum 
threats. 2.3.3.1. RSA -Based  Authentication  in NDN:  
● Key Generation : RSA  generates  two large  prime  numbers  to create  public  and private  keys. ● Signing : The private  key is used to sign  data for authentication. ● Verification:  The public key  verifies  the authenticity  of the signed  data 
 
10  ● Reason  for Use: RSA  has been  widely  adopted  due to its strength  in classical  environments. However, it is vulnerable to quantum  attacks, as  Shor’s algorithm can efficiently solve the 
underlying mathematical problems. 2.3.3.2. ECC  Integration  in Network  Security:  
● Key Generation : ECC  generates  keys based  on elliptic  curve  equations,  providing 
stronger security with shorter key lengths compared to RSA. ● Signing : ECC  uses the private  key to sign messages. ● Verification : The public  key is used to verify  the signature. ● Reason for Use : ECC is more efficient than RSA due to smaller key sizes and faster 
computat ions.

However, it still falls short in  post-quantum  security, as it is vulnerable 
to quantum attacks. 2.3.3.3.  AES in  NDN Data  Encryption:  
● Key Generation : AES does not rely on public/private key pairs but uses symmetric 
encryption with a secret key. ● Encryption : AES  encrypts  data using  the secret  key, ensuring  confidentiality. ● Decryption : The same  secret  key decrypts  the data at the receiving end. ● Reason  for Use:  AES  is widely  used due to its resilience  to classical  attacks  and partial 
resistance to quantum attacks (Grover’s algorithm). However, quantum resistance 
requires significantly larger key sizes, which can impact performance. 11   
3. Aim and Statement  of Problem  
 
The aim  of this project is to develop a secure authentication mechanism  for Named Data Networking 
(NDN) by integrating the Dilithium post -quantum cryptographic algorithm. This research focuses on 
mitigating  the vulnerabilities  of NDN  to quantum -based cryptographic attacks,  ensuring its  resilience 
again st future quantum threats. To achieve this, we will modify the NDN self -certification process 
using Dilithium, leveraging its lattice -based cryptography  to enhance data  security.

Additionally, the 
project aims to improve performance efficiency  by utilizing  Dilithium  as an  accelerator  to reduce  the 
time required for signing plain data, thus ensuring practical scalability in real -world systems. 3.1. Statement  of the Problem  
In today’s rapidly evolving technological landscape, securing digital communication is bec oming 
increasingly  complex, particularly  with the emergence of  quantum  computing. Current cryptographic 
systems,  which  have  reliably  protected  sensitive  data for decades,  are now under  threat  due to quantum 
algorithms capable of  breaking their core mathematical  foundations. In  addition  to this cryptographic 
challenge, modern communication models like Named Data Networking (NDN) introduce unique 
security considerations, such as content -based authentication and real -time data distribution. This projec t addresses two critical problems: the looming vulnerability of classical cryptographic 
algorithms  to quantum  attacks,  and the need to maintain  efficient and  secure  data exchange within  the 
NDN paradigm. The following subsections elaborate on these two pro blem areas and how the 
integration of the Dilithium post -quantum algorithm aims to provide a sustainable and forward - 
compatible solution. 3.1.1. Cryptographic  Vulnerabilities  to Quantum  Computing  
With the advent of quantum computing, traditional cryptographic algorithms such as RSA and ECC 
are no longer sufficient to ensure  secure  communication.

Quantum  algorithms, like  Shor’s  algorithm, 
have the potential to break these cryptographic systems, exposing sensitive data to malicious actors. The challenge  is to adopt post-quantum  cryptographic  algorithms  that can withstand  these  new threats. The problem lies in identifying an  efficient and secure solution  that can  replace these legacy systems 
without compromising performance. This project addresses this by implement ing the Dilithium 
algorithm, a lattice -based digital signature algorithm recognized for its quantum resistance. 12  3.1.2. Challenges  in Secure  Data  Distribution  with  Named  Data Networking 
(NDN)  
 
In addition to cryptographic challenges, the project also tackles issues related to secure data 
distribution  in modern  communication  models  like Named  Data  Networking  (NDN). NDN  focuses  on 
securing data rather than endpoints, which presents a unique opportunity to integrate post -quantum 
cryptographic  methods like Dilithium. However, this integration introduces challenges, such as 
ensuring  that cryptographic  operations,  like signing  and verification,  are efficiently  performed  without 
slowing down the real -time data distribution NDN is designed for. The  Dilithium algorithm, 
implemented  in this project,  ensures  that data authenticity  and integrity  are maintained  within  the NDN 
framework, providing a quantum -resistant solution that supports secure communication in future 
networking paradigms. 3.2.

Scope  and Stakeholders  
The scope of the project is focused on addressing both the security and performance aspects of 
integrating Dilithium into NDN. The main stakeholders affected include:  
3.2.1. Researchers  and Developers  
Researchers working on network security and post -quantum cryptography are at the forefront of 
designing secure and efficient communication systems. They require practical, deployable 
cryptographic solutions capable of  resisting attacks from  quantum  computers while maintaining high 
throughput and efficien cy in real -world systems. With the growing push for NIST -approved post - 
quantum  algorithms, researchers need  to explore  methods  of optimizing  algorithms like  Dilithium  for 
security. This project addresses these needs by combining Dilithium’s lattice -based cryptographic 
security, offering a solution that is both quantum -resistant and performant for NDN systems. 3.2.2. End Users  
The ultimate  beneficiaries  of this project are  end users who rely  on secure,  and efficient,  networks  for 
accessing content and data. Quantum computing threatens the integrity and security of current 
communication systems, making the transition to post -quantum  security crucial for protecting users’ 
sensitive  data in the future. This project  ensures  that the NDN  architecture  remains  secur e and capable 
of safeguarding data against quantum adversaries.

13  3.3 Approach  to Tackling  the Problem  
To address the dual  challenges of  cryptographic vulnerability in the quantum era and the demands of 
secure  data distribution  in NDN,  a strategic  and technically  sound  approach  is required. The  proposed  
solution  must  not only provide  robust  security  but also align  with the architectural  principles  of Named 
Data Networking —particularly its focus on content authenticity and self -certification. This projec t adopts  a hardware -accelerated,  post-quantum  cryptographic  framework  by integrating  the 
Dilithium  algorithm into the NDN infrastructure. The following subsection explains how this 
integration is designed to enhance the self -certification mechanism of NDN and deliver a scalable, 
quantum -resistant authentication solution. 3.3.1. Integration  of Dilithium  for Secure  Authentication  
The primary objective of the project is to enhance the self -certification process of NDN by 
incorporating the Dilithium algorithm. Dilithium is a lattice -based digital signature algorithm 
recognized for its quantum resistance. By replac ing traditional cryptographic schemes like RSA and 
ECC with Dilithium, the system  will be able to withstand potential  quantum  attacks. This integration 
ensures  that data  authenticity  and integrity  are maintained in  the NDN  architecture  while  ensuring  the 
system remains robust against quantum threats. 14   
4.

Hardware,  Software  analysis  and requirements  
 
4.1. Fact-Finding  Techniques  
In the initial  phase  of the project,  several  fact-finding  techniques  were  employed  to gather  requirements 
and ensure  the most  efficient  and secure  design  for the Dilithium  accelerator. These  techniques include:  
1. Literature Review : A thorough study of post -quantum cryptography and the Dilithium 
algorithm was conducted by reviewing research papers, s tandards from NIST, and technical 
documentation. This helped us to understand the security requirements and performance 
expectations for the project. 2. Discussions  with  cryptography  experts : Discussions  were  held with cryptography  experts  on 
pqc-forum groups  to understand the practical challenges of implementing lattice -based 
cryptographic algorithms. 4.2. Hardware  Analysis  and Requirements  
For the hardware  platform,  the project  required  specialized  resources  capable  of handling  the 
computational complexity of the Dilithium algorithm, including:  
4.2.1. Xilinx  Zynq -7000  SoC 
○ Pros : Combines  an ARM  processor  with programmable  logic,  providing  flexibility  for 
both software  and hardware  tasks. Its high-performance  capabilities  make  it suitable  for 
real-time applications. ○ Cons : Higher  power  consumption  and cost compared  to smaller  FPGAs. 4.2.2. Intel  (Altera)  Cyclone  V FPGA  
○ Pros : Low power  consumption  and relatively  lower  cost. Ideal  for prototyping 
cryptographic accelerators.

○ Cons : Limited performance for high -throughput applications, making it less ideal for 
real-time secure communication systems. 4.2.3. Arty -7 FPGA  (Chosen)  
○ Pros : Strikes a balance between performance, power consumption, and cost. It offers 
enough computational power to handle Dilithium's pol ynomial multiplication   
 
 
15  operations while remaining energy -efficient, making it ideal for cryptographic 
applications. ○ Why Chosen : The Arty -7 provides excellent flexibility for porting the Dilithium 
algorithm  and supports  the required  performance  for key generation,  signature  creation, 
and verification at a lower power footprint compared to Zynq -7000. The final decision to use the Arty -7 FPGA was based on its balance of cost,  power efficiency,  and 
performance, and due to the team's familiarity and proficie ncy with Arty -7 FPGA. 4.3. Software  Analysis  and Requirements  
Several  software  technologies  were  evaluated  to determine  the best combination  for the front -end 
interface, back -end logic, and middle layer:  
1. Front -End: 
○ Python was chosen for developing the initial implementation of the Dilithium 
algorithm. Python’s extensive libraries, such as PyCryptodome, made it easier to use 
shake algorithm libraries. 2. Back -End: 
○ SystemVerilog  was selected  for implementing  hardware  logic on the FPGA.

This HDL 
allows for precise control over the low -level operations needed for efficient key 
generation, signature creation, and verification. 3. Middle  Layer  (Communication  Protocol) : 
○ The UART protocol was selected as the communication layer between the miniNDN 
simulator running on the laptop and the FPGA hardware. UART offers reliable and 
straightforward data transmission between the software and hardware layers. 4. Simulation : 
○ To simulat e the working of Dilithium, we will integrate it with the NDN Network. Hence, the plan is to utilize the MiniNDN Framework which provides a lightweight 
simulation environment for NDN Network. 4.4. System  Structure  
The overall  system  consists  of the following  components:  
● Laptop Running miniNDN : The software layer simulates the NDN environment and sends 
messages to be signed and verified using Dilithium. 16  ● UART Protocol : A communication channel  that links the laptop and the FPGA, transmitting 
data for cryptographic operations. ● FPGA  (Arty -7): Port the Dilithium  accelerator  onto Field  Programmable  Gate  Array  (FPGA) 
platforms. ● Dilithium  Accelerator : Designing  of a hardware  accelerator  for the Dilithium  digital  signature 
operations using SystemVerilog, which includes key generation, signature, and verification 
algorithms.

Figure  4.1 System  Diagram  of Athestia  

 
17  Figure  4.1 illustrates  the architecture  and interaction  between  the miniNDN  (Named  Data  Networking) 
framework  and the Dilithium  Accelerator  to ensure  secure  and efficient communication  through  post- 
quantum cryptographic methods. ● miniNDN  Framework:  
a. The NDN framework  is depicted  with Producers, Consumers, and  Routers  that facilitate 
the exchange of data packets. b. The Certificate Authority  (CA) issues certificates  to secure network  interactions. Data 
packets travel through routers, allowing consumers to retrieve information from 
producers. ● UART  Protocol:  
a. The Universal  Asynchronous  Receiver -Transmitter  (UART)  protocol  is used to bridge 
communication between the miniNDN framework and the Dilithium Accelerator, 
enabling data exchange for cryptographic operations. ● Dilithium  Accelerator:  
a. The Dilithium  Accelerator  performs  critical  cryptographic  operations  such as key 
generation, signing, and verification of data packets. i. Decoder:  Decodes  incoming  requests  or data packets  from  the miniNDN  
framework. ii. Memory  Controller:  Manages  the memory  operations  required  for 
cryptographic key storage and retrieval. iii. Control  Unit:  Directs  the overall  operation  of the accelerator,  coordinating  tasks 
like key generation, signing, and verifying. ● Cryptographic  Operations:  
a. Key Generation:  Produces  public  and private  keys for  signature  and verification. b.

Signature:  The signature  unit signs  data packets  to guarantee  integrity  and authenticity. c. Verifier:  Verifies  signatures  using  public  keys to ensure  data authenticity  and security. This architecture demonstrates the seamless integration of  the Dilithium post -quantum  cryptographic 
accelerator with the miniNDN framework, ensuring robust security for future network 
communications. 18  4.4.1. Actor  Use Case  Diagram  
 
 
Figure  4.2 Actor  Use Case  Diagram  
Figure  4.2 presents  a use case diagram  describing  the interac tion between  various  actors  in the Athestia 
system, which secures data exchange using post -quantum cryptography, specifically the Dilithium 
algorithm, and certificates managed by  the Certificate Authority  (CA) within the NDN framework. Actors:  
1. Consumer:  Requests  data and verifies  the authenticity  and integrity  of data packets. 2. Producer:  Provides  data packets  and ensures  they are signed and certified. 3. Dilithium:  A post-quantum  cryptographic  algorithm  used for key generation,  signing,  and 
signature verification. 4. Certificate  Authority  (CA):  Responsible for  signing  and certifying  public  keys. 5. NDN  Router:  Forwards  and stores  interest  and data packets  within  the network. 19  Use Case  Breakdown:  
1. Consumer  Use Cases:  
○ Generate  interest  packet:  Consumer  generates  a request  for data (interest  packet). ○ Receive  data packet:  The consumer  receives  a data packet  from  the producer.

○ Request to verify  producer’s PK from  CA’s PK: Verifies the producer's public key by 
checking the CA's signed certificate. ○ Request  to verify  Data  packet  from  producer’s  PK: Verifies  the received  data packet  by 
using the producer's public key. ○ Check  signature:  Ensures  that the  data packet's  signature  is valid. 2. Producer Use  Cases:  
○ Receive interest packet: The producer receives the interest packet from the consumer 
via the NDN router. ○ Request  to generate keys: The producer requests Dilithium to generate a public and  
private key pair (PK and SK). ○ Receive  keys:  The producer receives  the generated  keys from  Dilithi um. ○ Request  for PK certificate  from  CA: Producer  requests  the CA to sign the public  key. ○ Request to sign data from  producer's secret key: Signs the outgoing data packet using 
the producer’s secret key. ○ Get & provide a signed data packet to the network: The  producer provides the signed 
data packet to the network for forwarding to the consumer. 3. Dilithium  Use Cases:  
○ Generate  PK and SK: Dilithium  generates  the public  key (PK) and secret key  (SK) for 
the producer.

○ Generate signature: Creates a digital signature  using the secret key for data integrity  
and authenticity. ○ Verify  signature:  Verifies  the signature  using  the public  key. 4. Certificate  Authority  (CA)  Use Cases:  
○ Request  for signing  the PK: The CA signs  the producer’s  public  key, certifying  its 
authenticity. 20  5. NDN  Router  Use Cases:  
○ Check  interest  packet  is available:  The NDN  router  verifies  if the interest  packet  exists 
in its cache. ○ Forward  interest  packet:  Routes  the interest  packet  from  the consumer to  the producer. ○ Forward  & store  data packet:  Forwards  the signed  data packet  from  the producer  to the 
consumer and stores it if necessary. 4.4.2. Activity  Diagram  
 
Figure  4.3 Activity  Swim  Line Diagram  of Athestia

 
21   
Figure 4.3 illustrates  the process of  certificate -based trust management in  a Named Data Networking 
(NDN) system, integrated with the post -quantum cryptographic algorithm Dilithium for secure key  
and signature management. The diagram  includes five key  actors:  the consumer, the NDN router, the 
producer, the Dili thium cryptosystem, and the Certificate Authority (CA). 1. Consumer:  
○ Connect to NDN Network: The consumer node connects to the NDN network.

It 
already possesses the CA's public key (PK), which is necessary for verifying trust. ○ Generate  Interest  Packet:  The consumer  generates  an Interest  Packet  to request  data. ○ Receive  Data  Packet:  After  the Interest  Packet is  processed,  the consumer  receives  the 
requested data packet from the producer. ○ Verify Chain of Trust: The consumer initiates a verification process to ensure the 
authenticity of the producer’s public key by checking the certificate provided by the 
CA. ○ Request to Verify Producer’s PK from CA: The consumer asks the CA to verify the  
producer’s public key by using its certificate. ○ Check  Signature  Verification:  The consumer  checks  if the producer’s  signature  can be 
verified. If the verification fails, the process ends with a false return. ○ Request to Verify  Data Packet from  Producer’s  PK: O nce the producer’s  public key  is 
verified, the consumer requests to verify  the data packet using that public key. ○ Check  Data  Packet  Signature:  The consumer  checks  the signature  on the data packet. If 
verified successfully, it returns true; otherwise, it returns false. 2. NDN  Router:  
○ Check  Neighbouring  Nodes: The  router first  checks  for any available  neighbouring 
nodes in the network.

○ Check Interest Packet Availability: If an Interest Packet is available,  it forwards the  
packet  to the producer. If no packet  is available,  the router  does not forward  the request. ○ Forward Interest Packet: If  conditions are met, the Interest Packet is forwarded to the 
appropriate producer. ○ Forward & Store Data Packet: Once the producer generates a data packet, the router  
forwards  it to the consumer and may store it for future requests. 22   
3. Producer:  
○ Receive  Interest  Packet:  The producer  receives  the Interest  Packet  from  the NDN 
router. ○ Request  to Generate  Public  and Secret  Key:  Upon receiving  an Interest  Packet, the 
producer initiates a request to generate a public key (PK) and a secret key (SK). ○ Receive  PK & SK: The producer  receives  the generated  public  and secret  keys from  the 
Dilithium cryptosystem. ○ Request PK  Certificate from  CA: The producer sends a request to the CA  to receive a 
signed certificate for its public key. ○ Get Signed  Public  Key from  CA: The CA signs  the producer’s  public  key and sends  the 
signed certificate back to the producer.

○ Request  to Sign Data  Packet:  After  obtaining  the signed  public  key, the producer  sends 
a request to the Dilithium system to sign the data packet using its secret key. ○ Get Signed  Data  Packet:  The producer  receives  the signed  data packet,  which  is 
forwarded to the consumer via the NDN router. # 
 
 
 
 
 
 
 
 
 
 
4. Dilithium:  
○ Generate  PK and SK: This step involves  the generation  of the  public  key (PK)  and 
secret key (SK) using the Dilithium key algorithm. ○ Generate  Signature:  The producer’s  data packet  is signed  using  the Dilithium  signature 
algorithm, creating a secure signed data packet. ○ Verify Signature: When requested, Dilithium verifies the signatures using the public 
key and the verify algorithm. 5. Certificate  Authority  (CA):  
○ Request  to Sign PK: The CA receives  a request  to sign the producer’s  public  key. ○ Generate Signature: The  CA signs the producer’s public key and returns a certificate 
that links  the key to the producer,  providing  a chain  of trust for the consumer  to verify. This process ensures that the consumer can  trust the data packets received from  the producer  through 
the verification of certificates and signatures using the Dilithium post -quantum cryptosystem. 23  4.4.3.

Operational  Diagram  
 
 
Figure  4.4 Operational  Diagram  

 
24  Figure  4.4 outlines  the communication  process  between  a Laptop  and a Dilithium  Accelerator  using  a 
UART Protocol, facilitating cryptographic operations for secure data exchange. 1. Laptop  Interface:  
○ The laptop  represents  the user's  system,  which  interacts  with the Dilithium  Accelerator. ○ Application:  Runs  software  that generates  data for transmission. ○ Bitstream  Generation: Converts  data into a  bitstream  to be transmitted  via UART. ○ UART Driver: The driver responsible for managing the transmission of data through 
the UART interface, converting the bitstream into TX (Transmit) and RX (Receive) 
signals. 2. UART  Protocol:  
○ The UART Protocol  is used to establish serial  communication between  the laptop  and 
the Dilithium Accelerator. ■ The TX (Transmit)  line sends  the data bitstream  from  the laptop  to the 
accelerator. ■ RX (Receive)  line collects  responses from  the accelerator back  to the laptop. 3. Dilithium  Accelerator:  
○ The Dilithium  Accelerator  handles  cryptographic  operations  including  key generation, 
signing, and signature verification. ■ Control Unit:  Central unit  that directs  the flow of data  and controls  various 
operations within the accelerator. ■ Memory Controller: Manages storage and retrieval of cryptographic keys and 
other necessary data.

■ Key Generation:  Responsible  for generating  the public  and private  keys used in 
the cryptographic process. ■ Signature  Unit:  Signs  outgoing  data packets  to ensure  their authenticity. ■ Verifier  Unit:  Verifies  incoming  data packets  using  the public  key to  check 
whether the signature is valid. 4. Data  Flow:  
○ The Bitstream  sent by  the laptop  via the UART interface is  processed  by the Dilithium 
Accelerator. 25  ○ The processed data, including cryptographic signatures or verification results, is sent 
back to the laptop using the RX line of the UART Protocol. ○ The final output  includes  the public  key, signature,  and the verification  result 
(verified/not verified) as needed by the system. This diagram  demonstrates  the interaction  between  the laptop  and the Dilithium  Accelerator  for secure 
communication, highlighting the role of t he UART Protocol in transmitting data between the two 
components for cryptographic processing. 4.5. Requirements  
The system is designed with a clear set of functional and non -functional requirements to ensure its 
effectiveness,  security,  and adaptability  within  a post-quantum  secure  Named  Data  Networking  (NDN) 
environment. Functionally,  the system  enables  users  to sign and verify  data packets  using  the Dilithium 
algorithm, ensuring communication integrity and resistance to quantum attacks.

It also empowers  
system administrators to generate, manage, and monitor cryptographic keys and the overall 
performance of the Dilithium accelerator to maintain operational efficiency within the NDN 
framework. These capabilities are expressed through user stories that guid e system behavior and 
development  priorities. On the non-functional  side,  the system  is expected  to deliver  high performance 
with minimal latency while meeting stringent security requirements based on NIST post -quantum 
cryptographic  standards. The design  emphasizes  maintainability  through  a modular  codebase,  allowing 
for future updates and debugging with minimal disruption. Furthermore, the system is built to be 
interoperable  with existing  NDN  infrastructures,  ensuring  seamless  integration  and adaptability  across 
a variety of secure network environments. 4.5.1. Functional  Requirements  
The following user stories represent the functional requirements of  the system, defined in a standard 
format:  
1. As a User , I want  to sign data packets  using  the Dilithium  algorithm  so that my communication 
remains secure against quantum attacks. 2. As a System  Administrator , I want to generate and manage cryptographic keys  so that I  can 
ensure secure signing and verification operations. 3.

As a User , I want  to verify  the integrity  of the received  data packets  using  the Dilithium 
algorithm so that I can trust that the data has not been tampered with. 26  4. As a System Administrator , I want to monitor  the performance of  the Dilithium accelerator 
so that I can ensure its efficient operation within the NDN network. 4.5.2. Non-Functional  Requirements  
The non -functional requirements for the project ensure that the system meets essential performance, 
security, and scalability standards. The system must perform efficiently, processing inputs and 
generating  outputs  with minimal  delay. In terms  of security,  the system  must  provide  quantum -resistant 
encryption according to NIST standards, ensuring that communication channels are secure and 
cryptographic keys remain protected from unauthorized access. The system's modular codebase ensures easy maintainability, allowing for efficient updates and 
debugging. Compliance with NIST post -quantum standards to ensure data privacy and security. Additionally, the system is interoperable with existing NDN frameworks, f acilitating seamless 
integration with other cryptographic systems. 27   
5.

Software  design  and modeling  
This chapter provides a comprehensive overview of the project architecture and design diagrams, 
highlighting the integration of post -quant um cryptographic operations within the Named Data 
Networking (NDN) framework. 5.1. Project  Architecture  
The architecture of the project follows a modular design approach, strategically dividing 
responsibilities across specialized components to ensure scalabili ty, efficiency, and maintainability. This approach  integrates  hardware  acceleration,  network  simulation,  and cryptographic  protocols  into 
a cohesive  framework. Each  module  is designed  to perform  a specific  role while  interfacing  seamlessly 
with others, creating a  robust system  for post -quantum  cryptography  within Named Data  Networking 
(NDN). 5.1.1. Main  Components:  
5.1.1.1. Dilithium  Hardware  Accelerator  
This is a custom -designed module implemented  on an FPGA,  tasked  with executing  post-quantum 
cryptographic operations, including key generation, digital signature creation, and signature 
verification. ● Hardware  acceleration  significantly  boosts  the speed  of cryptographic  computations  compared 
to software implementations. ● It offloads cryptographic processing from the CPU, reducing the overall computational load 
and power consumption. ● Designed with scalability in mind, allowing adaptation to future cryptographic algorithms if 
required. 5.1.1.2. MiniNDN  Framework  
MiniNDN  serves  as a lightweight  simulation  environment  for implementing  and testing  NDN  
protocols and features.

● miniNDN  is modified  to interface  with the Dilithium  hardware  accelerator,  enabling 
cryptographic operations for data integrity and authenticity within the NDN simulation. ● Supports  self-certifying  data packets, leveraging  post-quantum  cryptographic  signatures. ● Provides a controlled environment for simulating network behaviors without requiring a full - 
scale deployment. 28  5.1.1.3. UART  Protocol  
The Universal Asynchr onous Receiver -Transmitter (UART) protocol acts as the communication 
bridge between the software -based miniNDN framework and the hardware accelerator. ● UART  ensures  reliable,  bidirectional  data transfer  between  the host CPU  and the FPGA 
module. ● Designed  to handle  asynchronous  communication,  providing  flexibility  for various  clock 
domains in the system. ● Enables  a low-overhead,  high-speed  interface  for transferring  cryptographic  requests  and 
responses. 5.1.2. Key Features  of Architecture:  
Separation  of Concerns  
 
● The project  design  separates  hardware  responsibilities  (e.g.,  cryptographic  computations)  from 
software functionalities (e.g., NDN packet handling and network simulation). ● This decoupling  simplifies  system  design,  debugging,  and maintenance. It also allows 
individual modules to be developed, tested, and upgraded independently. Optimized  Performance  
 
● Leveraging  the parallel  processing  capabilities  of the FPGA  ensures  cryptographic 
computations are executed efficiently.

● The hardware  acceleration  significantly  reduces  latency  in key cryptographic  operations,  such 
as signature creation and verification, enhancing overall system throughput. 5.2. Architecture  Used:  
The system employs multi -layered architecture, with each layer serving a distinct role to enable 
seamles s integration of hardware -based cryptographic operations with Named Data Networking 
(NDN)  features. This design  ensures  clarity  of responsibilities, improved  performance,  and scalability 
for future enhancements  
 
 
 
 
29  5.2.1. Hardware  Layer  
The hardware layer is the f oundation of the architecture, responsible for executing post -quantum 
cryptographic operations using the Dilithium cryptographic scheme on an FPGA. Dilithium  Hardware  Accelerator : 
 
● Performs computationally intensive tasks such as key generation, digital signature creation, 
and signature verification. ● Optimized  for high throughput  and low latency, leveraging  the parallel  processing  capabilities 
of FPGAs. Custom  FPGA  Design : 
 
Developed using hardware description languages like VHDL or SystemVerilog. Incorpo rates  modularity  to allow  updates  or extensions  for future  cryptographic  algorithms  
 
5.2.2. Middleware  Layer  
This layer  bridges  the hardware  accelerator  and the miniNDN  framework,  ensuring  smooth 
communication and coordination between the hardware and software components. UART  Protocol : 
 
● Serves as the communication backbone between the host system  (running miniNDN) and the 
FPGA -based hardware accelerator.

● Facilitates asynchronous bidirectional data transfer, making it possible to send cryptographic 
requests and receive responses efficiently  
Interface  Logic : 
 
● Designed  to handle  protocol -specific  data formatting, packetizing, and  error  handling for  robust 
communication. ● Acts as a translator  between  the digital  signals  of the FPGA  and the application  data structures 
in the miniNDN framework  
● The application  layer  focuses  on implementing  and enhancing  NDN  protocols,  ensuring  secure 
communication by integrating the Dilithium -based cryptographic operations. 30  Self-Certifying  Data  Packets : 
 
● Modified  NDN  packets  include  post-quantum  secure  digital  signatures  generated  by the 
hardware accelerator. ● Self-certification ensures that the authenticity and integrity of the data can be independently 
verified by any node in the network without relying on a central authority  
 
MiniNDN  Framework  Integration : 
 
● The NDN  simulation  environment  is enhanced  to suppor t post-quantum  cryptographic 
mechanisms. ● This allows  developers  to test and refine  secure  communication  processes  in a controlled 
network simulation  
 
 
5.3. Design  Diagrams:  
To provide a comprehensive understanding of  the system's architecture, functionality, and data flow, 
multiple UML diagrams have been developed. These diagrams clarify the interactions between 
components,  the static  and dynamic  structures  of the system,  and the organization  of data storage.

Each 
diagram  serves  a specific  purpose  in the design  process,  ensuring  clear  communication  and alignment 
among team members and stakeholders. 5.3.1. Object  Diagram  
The object diagram provides a snapshot of the system at runtime, focusing on the objects involved  
and their relationships during operation . 31   
Figure  5.1 Object  Diagram  
 
Figure 5.1 is an instance -level representation of the class diagram, showcasing specific objects and 
their interactions in a real -world scenario. It provides a concrete view of how the system operates, 
emphasizing the dynamic rel ationships between instances of classes. Request  and Response  Process  
● A Consumer  object  initiates  a request  by creating  an Interest  Packet  object  with attributes  such 
as Interest_id, name, and nonce. This  packet travels  through  the network,  eventually reaching 
a Producer object. ● The Producer object responds by generating a Data Packet object. This packet includes the 
requested  data, along  with a Dilithium  Signature  created  using  the producer’s  secret_key. The 
producer’s public key and certificate are in cluded to verify the authenticity of the response. Cryptographic  Operations  in Action  
● Instances of the Key Pair Generation, Signature, and Verification classes demonstrate 
cryptographic  workflows.

For example,  the Key Pair Generation  object  generates  keys that are 
used by the Signature object to sign the Data Packet. The Verification object validates this 

 
32  signature, ensuring the data's integrity and authenticity. ● The Dilithium  Accelerator  object  optimizes  the signing  and verification  processes,  showcasing 
hardware acceleration for cryptographic computations. Routing  and Packet Handling  
● A Router object processes packets in transit, utilizing attributes like cache_capacity and 
forwarding_table  to route  packets  efficiently. Interest packets  are matched  with cached  data or 
forwarded based on the pending_interest_table, while data packets are stored temporarily for 
quick retrieval. Certificate  Management  
● The Certificate  Authority  object issues certificates  to the Producer  and Consumer  objects. The 
Issue  Digital  Certificates  object ensures  that all  certificates  are valid and traceable  to a trusted 
authority. This process establishes a chain of trust, enabling secure communication. 5.3.2. Class  Diagram  
The class diagram provides a static view of the system, detailing its  structure through classes, their 
attributes, methods, and relationships. Figure  5.2 Class  Diagram  

 
33  Figure 5.2 depicts the structural framework of a system integrating Named Data Networking (NDN) 
and Dilithium  post-quantum cryptography, highlighting the essential classes, their attributes, and 
behaviors.

Each class serves a specific role in achieving secure and efficient communication. Core  Components:  
● The Consumer and Producer classes form the fundamental endp oints of the system. The 
Consumer is responsible for initiating requests for data by generating interest packets, while 
the Producer provides signed data packets in response to these requests. Both classes include 
attributes such as public_key, certificate , and cryptographic methods to ensure secure 
exchanges. ● The Interest Packet and Data Packet classes handle the transport of requests and responses 
within the network. Interest Packet includes attributes like Interest_id, name, and nonce to 
identify  and secure requests,  while  Data  Packet  contains  name,  data,  and a Dilithium  Signature 
to ensure the integrity and authenticity of the response. Cryptographic  Operations:  
● Cryptographic  processes  are managed  by specialized  classes. The  Keypair Generation  class is 
responsible  for creating  public -private  key pairs,  essential  for signing  and verifying  operations. The Signature class  provides methods  for signing messages, utilizing attributes like Message, 
secret_key, and ctx (context). The Verification class ensures t he validity of received data by 
verifying the signature against the sender's public key. Each of these classes encapsulates 
specific cryptographic algorithms, including NTT, expandA, hashing, and sampleInBall.

● The Dilithium Accelerator class is a hardware -oriented module designed to optimize the 
execution  of cryptographic operations. It handles operations like key  generation, signing, and 
verification at high speed. Trust  and Certification:  
● Trust  management  is handled  by the Certificate  Authority  and Issue  Digital  Certificates  classes. These ensure that producers and consumers have valid credentials, using attributes like 
certificate_id, trust_anchor, and public_key. The methods issue_certificate() and 
generateCertificate() ensure secure issuance and manage ment of certificates. Routing  and Packet Management:  
● The Router Packets - Router class handles the forwarding and caching of packets across the 
network. Attributes  like router_id,  cache_capacity,  and forwarding_table  support  efficient  data 
 
34  delivery, while  methods like routePacket(Packet) and storePacket(Packet) ensure proper 
handling of network packets. 5.4. Behavioral  Diagrams  
Behavioral diagrams focus on capturing the dynamic processes and workflows of the system. They 
provide insight into how various components interact during runtime, how tasks are performed step - 
by-step, and how the system transitions between different operational states. These diagrams are 
instrumental in understanding the system's behavior under different scenarios, such as crypto graphic 
operations and network communication. 35  5.4.1.

Sequence  Diagram  
Visualizes the interaction between  system  components during a typical  operation, such  as processing 
a data request. Figure  5.3 Sequence Diagram  
Figure 5.3 illustrates th e interactions among the Consumer, NDN Router, Producer, Dilithium 
cryptographic module, and Certificate Authority (CA) to securely exchange data in a Named Data 
Networking (NDN) system. The process begins with the Consumer generating an Interest Packet 
containing  the identifier  and name  of the requested  data. This packet  is forwarded  to the NDN  Router, 
which checks  its cache  for the requested  content. If the  content  is available,  the router  forwards the  

 
36  Data Packet directly to the Consumer. Otherwise, the Interest Packet is forwarded to the Producer 
responsible for the data. Upon receiving the Interest Packet, the Producer initiates the generation of public and private keys 
using the Dilithium  cryptographic module. A  request is then  sent to the Certificate Authority  to issue 
a signed  digital  certificate  for the generated  public  key. Once  the CA verifies  the request  and signs  the 
public  key, the Producer  uses the private  key to sign the requested  data,  creating  a Signed  Data  Packet.

This packet  is then forwarded  back to the NDN  Router,  which  stores  it and forwards  it to the Consumer. To ensure authenticity, the Consumer requests verification of the Producer’s public key and the 
received  data packet. The Dilithium  cryptographic  module  verifies  the signature  against  the public  key 
issued by  the CA. If  the signature matches, the verification  succeeds, and the Consumer is  assured of 
the data’s integrity  and authenticity. In case of  verification failure, the process terminates, indicating 
an issue with the data or its source. The sequence diagram effectively showcases the step -by-step 
secure communication flow, leveraging Dilithium post -quantum cryptography and a trusted CA. 5.5. User  Interface  Design  
 

 
37   
 
 
 
 

 
38   
 

 
39   

 
40  6. Algorithm  analysis  and complexity  
 
6.1. Introduction  
This chapter explores the foundational algorithms deployed in our project, focusing on their critical 
role in enhancing the system's efficiency and effectiveness. We dissect the algorithms implemented, 
scrutinizing  their design,  purpose,  and significance  to the overarching  goals  of the project. The chapter 
provides  a comparative  analysis  of these  algorithms  against  other  cryptographic methods,  specifically 
examining their time and space complexities.

This detailed exploration is intended to furnish a 
comprehensive understanding of the algorithms’ functionalities and their impact on the project. 6.2. Dilithium  Algorithms  
As cryptographic  research  advances  in response  to emerging  threats,  Dilithium has  gained  recognition 
as one of the most reliable digital signature algorithms for post -quantum  security. Developed as part 
of the NIST post -quantum cryptography standardization process, it offers  a powerful and efficient 
alternative to legacy algorithms like RSA and ECC, which are vulnerable in the face of quantum 
computing. The following subsections delve into the specific purpose, significance, and operational 
mechanisms  of the Dilithium  algorit hm, providing  both conceptual  understanding  and technical  insight 
into how it functions within our system. This includes a breakdown  of its cryptographic strength  and 
pseudocode  that captures its key processes, such as key generation, signing, and verification. 6.2.1. Purpose  and Significance  
The Dilithium  algorithm  is at the  forefront  of our digital  defenses,  acting  as a digital  signature  scheme 
designed to withstand the formidable powers of  quantum  computing. As we edge closer to the era of 
quantum compu ters, traditional cryptographic methods like RSA and ECC are under threat.

These 
methods depend heavily on the complexities of factorization and elliptic curve calculations — 
challenges  that quantum  computers  are equipped to solve easily. Enter  Dilithium: a  robust alternative 
rooted  in lattice -based cryptography. This method  leans  on the complexities  of lattice problems, such 
as the Shortest  Vector Problem  (SVP), which  are tough  nuts to crack,  even for quantum  technologies. This makes  Dilithium  a cornerstone  in our quest for  a crypto system  that remains secure against both 
today's and tomorrow's cyber threats. 41  6.2.2. Pseudocode  and Operation  
Here,  we outline  the core functions  of the Dilithium  algorithm,  encapsulated  in pseudocode  to illustrate 
its operational mechanics clearly:  
Key Generation:  
 
 
 

 
42  Signature:  
 
 

 
43  Verification:  
 
 
 

 
44  6.2.3 Comparison  with Other  Post-Quantum  Cryptographic  Algorithms  
When  assessing  the landscape  of post-quantum  cryptographic  algorithms,  particularly  digital  signature 
schemes, it is  essential  to compare Dilithium with  other signature algorithms  such as Falcon. Each  of 
these algorithms brings unique strengths and potential  drawbacks, tailored to different security  needs 
and computational environments. Dilithium  vs. Falcon:  
 
● Algorithmic  Foundations:  
○ Dilithium is based on the hardness of the Ring -Learning with Errors (Ring -LWE) 
problem, which involves operations within polynomial rings.

Its security  is derived 
from  the difficulty  of solving  these  problems  both on classical  and quantum  computers. ○ Falcon uses the NTRU problem  combined with the Fast Fourier Transform  (FFT) for 
efficient polynomial multiplication. It stands out for its use of small keys and fast 
operations, which are beneficial for environments where bandwidth and storage are 
concerned. ● Performance  and Efficiency:  
○ Dilithium offers a robust balance betwe en signature size and verification speed, 
making  it well-suited  for systems  where  these  factors  are crucial. It provides  flexibility 
in terms  of trade -offs between  key size, signature  size, and security  level,  which  can be 
adjusted according to specific needs. ○ Falcon excels in  environments where smaller signature sizes are critical. It has one of 
the smallest signature sizes among post -quantum candidates, which is particularly 
advantageous for systems where bandwidth savings are paramount. ● Security:  
○ Both Dilithium and Falcon are considered secure against known quantum attacks. Dilithium's security parameters can be scaled to meet various levels of quantum 
resistance,  allowing  it to be tailored  to the expected  capabilities  of quantum  computers.

○ Falcon offers a high level  of security  even  with smaller keys and signatures, although 
the complexity of its implementation and the need for careful parameter selection to 
avoid vulnerabilities are notable considerations. ● Implementation  Considerations:  
○ Dilithium  is straightforward to implement with existing cryptographic libraries that  
 
45  support lattice -based operations. Its reliance on well -understood algebraic structures 
makes  it less susceptible  to implementation  errors  that could  compromise  security. ○ Falcon requires careful implementation, especially in handling polynomial arithmetic 
securely and efficiently. The use of FFT -based techniques, while providing speed 
advantages, also necessitates precision to prevent side -channel attac ks. ● Use Case  Suitability:  
○ Dilithium is particularly effective in standard digital signature applications such as 
securing software distribution, document signing, and identity verification, where its 
balance of security and performance is valuable. ○ Falcon is suited for applications where the efficiency  of signature verification  and the 
minimization of  signature size are critical, such as in IoT devices or  other bandwidth - 
constrained environments. 6.3. COMPLEXITY  ANALYSIS  AND  OPTIMIZATION  
Understanding t he computational demands and efficiency of the algorithms we implement is crucial 
for optimizing the performance and reliability of our system.

This section breaks down the time and 
space complexities of the Dilithium algorithm, offering insights into how well it performs under 
various operational conditions and how we can tune these parameters for optimal performance. 6.3.1. Time  Complexity  
Dilithium  Algorithm:  
 
● Best Case:  The best -case scenario for Dilithium occurs under conditions where the algorithm 
faces minimal interference and optimal operational environment. In such situations, the time 
complexity is linear, denoted as O(n), where n represents the size of the input message. This 
scenario assumes  that the lattice  operations  and the hashing functions,  which are integral  parts 
of the signing and verification processes, execute without any computational delays. ● Average Case:  The average case time complexity for Dilithium is typically O(n log n). This 
considers  the average performance and efficiency  of the un derlying lattice reduction  and hash 
function calculations during the signature generation and verification phases. The log factor 
accounts for the iterative process of reducing lattice dimensions to manageable levels, which 
is a key step in ensuring crypto graphic strength against potential quantum attacks. ● Worst Case:  The worst -case time complexity is O(n^2).

This scenario emerges under 
conditions where the lattice problems become exceptionally dense and the computational 
 
46  overhead peaks. Such  conditions might occur  with very  large input sizes or  when  the security  
parameters require extremely high -dimensional lattices to thwart advanced quantum or 
classical  attacks. In these instances,  the processing time increases  quadratically, reflecting the 
intensified  effort required to manage and simplify complex lattice structures. 6.3.2. Space  Complexity  
Dilithium  Algorithm:  
 
The space complexity of the Dilithium algorithm is primarily influenced by the size of the keys and 
the signatures it generates. These factors  are linearly  dependent on  the security  parameters  chosen  for 
the application, which are set based on the anticipated security  needs and the operational context:  
● Key and Signature  Sizes:  The space  required  to store  the keys and signatures  increases  linearly 
with their size, denoted  as O(n),  where  n refers  to the security  parameter  defining  the key length 
and the complexity of the signature. These parameters are adjustable, allowing for a flexible 
approach to balancing security and resource utilization. ● Optimizatio n Considerations: Optimizing space complexity involves selecting appropriate 
security parameters that do not overly burden the system's storage capabilities while still 
providing robust security.

This is particularly important in environments where memory 
resources   are  limited   or  where   system   efficiency   is  paramount. Techniques such as adjusting the lattice dimensions and exploring different configurations of 
lattice -based problems can help reduce the storage requirements without compromising the 
cryptographic integrity. Moreover, efficient memory management  practices and the use of 
compact data structures are critical for minimizing the footprint of the cryptographic 
operations. 6.4. Discussion  
The selection  of the Dilithium  algorithm  for our project  reflects  a strategic  choice  to prioritize  security 
in the quan tum era. This decision  underscores  the importance  of adopting  cryptographic  solutions  that 
not only meet current  security  standards but are  also forward  compatible  with emerging  technologies. 47  7. Implementation  
 
7.1. CODE  
This chapter presents the technical realization of Athestia: A Clean Slate Application using Named 
Data  Networking  (NDN)  and Dilithium. The implementation  integrates  a post-quantum  cryptographic 
signature scheme (Dilithium) on hardware with a simulated NDN environment (MiniNDN)  on the 
software side. Communication is established via the UART protocol, and key  modules are written in 
SystemVerilog for FPGA  and Python for software -side verification.Due to the complexity  and scale, 
this chapter focuses on the core cryptographic opera tions, rather than presenting the full codebase.

7.1.1.  main.py  
This file is the top -level  user interface script. It connects the user, NDN framework (MiniNDN), and 
the Dilitium. 7.1.2. Key_internal.sv  
This module implements the Dilithium Key Generation logic.

It packs functions into a finite state 
machine (FSM) to compute the public and secret keys in accordance with FIPS 204.  
import Dilithium_pkg::*;  
function automatic logic [63:0] extend_bits2(  
    input logic [3:0] value,  
    input int target_width,  
    input bit is_signed  
); 
    logic [63:0] extended_value;  
    int i; 
    extended_value[63:0] = value;  
 
    if (is_signed) begin  
        for (i = 4; i < target_width; i++)   
            extended_value[i] = value[3];    
    end else begin  
        for (i = 4; i < target_width; i++)  
            extended_value[i] = 1'b0;        
    end 
     
    return extended_value;  endfunction  
 
module key_internal(  
    input  logic clk, rst,  
    input  logic [255:0] zeta,  
    output logic final_done,  
    output logic [39167:0] sk,  
    output logic [20735:0] pk     
); 
 
    logic [255:0] swapOut;  
    SwapNibbles #(256) swap (  
        .in(zeta),  
        .out(swapOut)  
    ); 
 
    logic shakeDone, shakeRst, expandA_rst, 
expanda_done, s1_ntt_done, compute_t , 
shakeDone2, shakeStart;  
 
48      logic ntt_module_rst, t_ntt_done, 
nttinv_done, nttinv_rst, nttnew_done, 
pk_rst,sk_rst;  
    logic [271:0] shakeIn;  
    logic [511:0] shakeOut2;  
    logic [1023:0] shakeOut;  
    logic [20735:0] shakeIn2;  
    logic [31:0] A [0:k -1] [0:l -1] [0:255];  
    logic [3:0] count, ntt_count, nttinv_count, 
nttinv_count2;  
    logic signed [($clog2(eta)+1):0] s1 [0:l -1] 
[0:255];  
    logic signed [($clog2(eta)+1):0] s2 [0:k -1] 
[0:255];  
    logic expands_done, rst_ntt, nttdone, 
ntt_disabler;  
    logic signed [63:0] w [0:255] , checking 
[0:255];  
    logic [63:0] nttinv_w [0:255];  
    logic signed [31:0] w_hat [0:255], s1_ntt 
[0:l-1] [0:255];  
    logic [63:0] t_ntt [0:k -1] [0:255];  
    logic [63:0] nttinv_w_hat [0:255];  
    logic [2:0] i, j;  
    logic [8:0] countA;  
    logic [63:0] power2round_t;  
    logic [9:0] power2round_t1;  
    logic signed [12:0] power2round_t0;  
    logic [63:0] power_t [0:k -1] [0:255];  
    logic [9:0] power_t1 [0:k -1] [0:255];  
    logic signed [12:0] power_t0 [0:k -1] 
[0:255];  
    logic signed [12:0] sk_t0 [0:k -1] [0:255];  
    logic [255:0] pkencode_rho;  
    logic [9:0] pkencode_t1 [0:k -1] [0:255];        
    logic pk_done;    
    logic [63:0] t [0:k -1] [0:255];  
     always_ff @(posedge clk or posedge rst) 
begin  
        if (rst)  begin  
            shakeIn <= 272'd0;  
            i = 0;  
            j = 0;  
            countA = 0;  
            nttinv_count <= 0;  
             
            for (int m = 0; m < k; m = m + 1) 
begin  
                for (int n = 0; n < 256; n = n + 1) 
begin  
                    t_ntt[m][n] <= 32'd0;  
                end 
            end 
        end else begin  
            ntt_module_rst <= rst_ntt || nttdone;  
            shakeIn <= {l[7:0], k[7:0], swapOut};  
            if (shakeDone && expandA_rst === 
'x) expandA_rst <= 1;  
            if (expandA_rst) expandA_rst <= 0;  
            if (expands_done && rst_ntt === 'x) 
begin  
                rst_ntt <= 1;  
                ntt_count <= 0;  
                count <= 0;  
            end  
            if (count >= 0) co unt <= count + 1;  
            if (expands_done && count == 1) 
rst_ntt <= 0;  
            if (ntt_count < l && nttdone && 
~ntt_module_rst) begin  
                s1_ntt[ntt_count] <= w_hat;  
                ntt_count <= ntt_count + 1;  
            end 
            if (ntt_count == l && s1_ntt_done 
=== 'x) begin  
 
49                  s1_ntt_done <= 1;  
                ntt_disabler <= 1;  
            end 
            if (expands_done) begin  
                for (int k = 0; k < 256; k++) begin  
                    w[k] = 
exten d_bits2(s1[ntt_count][k], 64, 1);  
                end 
            end 
            if (expanda_done && s1_ntt_done 
&& expands_done && t_ntt_done === 'x) 
begin  
                t_ntt[i][countA -1] <= 
t_ntt[i][countA -1] + (A[i][j][countA -1] * 
s1_ntt[j][countA -1]); 
                if (i == 7 && j == 6 && countA == 
256) begin  
                    i <= 'x;  
                    j <= 'x;  
                    countA <= 'x;  
                    t_ntt_done <= 1;  
                end 
                if (countA < 256) countA  <= 
countA + 1;  
                else begin  
                    countA <= 0;  
                    if (j < l -1) j <= j + 1;  
                    else begin  
                        j <= 0;  
                        if (i < k -1) i <= i + 1;  
                        else i <= 0;  
                    end 
                end 
            end 
            nttinv_rst <= nttinv_done || 
t_ntt_done;  
            nttinv_w_hat <= t_ntt[nttinv_count2];  
            if (nttinv_done && ~nttinv_rst) begin                  t[nttinv_coun t2] <= nttinv_w;                 
                nttinv_count2 <= nttinv_count2 + 
1; 
            end 
            if (t_ntt_done) begin  
                nttinv_count2 <= 0;  
                nttinv_w_hat <= t_ntt[0];  
                nttinv_count <= nttinv_coun t + 1;  
                if (nttinv_count == 1) begin  
                    t_ntt_done <= 0;    
                end 
            end 
            if (nttinv_count2 == 8) begin  
                nttinv_rst <= 'x;  
                power2round_t <= t[j][countA] + 
s2[j][countA];  
                power_t1[j][countA -1] <= 
power2round_t1;  
                power_t0[j][countA -1] <= 
power2round_t0;  
            if ((j == 7 && countA == 256)) begin  
                countA <= 257;  
            end else begin   
                                        if (countA == 256) 
begin  
                                            countA <= 0;  
                                            if (j == 7) be gin 
                                                j <= j;                                  
                                            end else  
                                                j <= j + 1 ; 
                                        end else begin  
                                            countA <= 
countA + 1;  
                                        end 
                                    end              
                            end 
    if (pk_rst && nttinv_count == 3) begin         
        pkencode_rho <= shakeOut[255:0];  
 
50          pkencode_t1 <= power_t1;  
    end  
            if (pk_rst && nttinv_count == 4) 
begin  
    pk_rst <= 0;  
    nttinv_count <= nttinv_count;  
end else if (j == 7 && countA == 257) begin  
    if (pk_rst === 'x) begin  // First clock  
        pk_rst <= 1;  
        nttinv_count <= nttinv_count + 1;  
    end  
    if (pk_rst == 1) begin // Second clock  
        pk_rst <= 1;  
        nttinv_count <= nttinv_count + 1;  
    end 
end 
 
if (pk_done && shakeRst === 'x) begin  
     
    shakeRst <= 1;  
end 
if (shakeRst) begin  
    shakeRst <= 0;  
    shakeIn2 <= pk;  
end 
if (pk_done && s hakeRst == 0) begin  
    shakeStart <= 1;  
end 
if (shakeDone2 && sk_rst === 'x) begin  
    sk_rst <= 1;  
    sk_t0 <= power_t0;  
    for (int i = 0; i < k; i++) begin  
      $write("sk_t0[%0d]: ", i);  
      for (int j = 0; j < 256; j++) begin  
        $write("%0d  ", power_t0[i][j]);  
      end 
      $write(" \n"); 
    end end else if (sk_rst) begin  
    sk_rst <= 0;      
end 
        end 
    end 
 
    sponge #(  
        .msg_len(276),  
        .d_len(1024),  
        .capacity(512)  
    ) shake256 (  
        .clk(clk),  
        .reset(rst),  
        .start(1'b1),  
        .message({4'b1111, shakeIn}),  
        .z(shakeOut),  
        .done(shakeDone)  
    ); 
 
    ExpandA expandA (  
        .clk(clk),  
        .rst(expandA_rst),  
        .start(shakeDone),  
        .rho(shakeOut[255:0]),  
        .A(A),  
        .done(expanda_done)  
    ); 
 
    ExpandS ExpandS (  
        .clk(clk),  
        .rst(expandA_rst),  
        .start(shakeDone),  
        .rho(shakeOut[767:256]),  
        .s1(s1),  
        .s2(s2),  
        .done(expands_done)  
    ); 
 
 
51      NTT #(.WIDTH(64)) NTT (  
        .clk(clk),  
        .rst(ntt_module_rst),  
        .w(w),  
        .w_hat(w_hat),  
        .done(nttdone),  
        .disabler(ntt_disabler)  
    ); 
     
    NTT_INV #(.WIDTH(64)) NTT_INV (  
        .clk(clk),  
        .rst(nttinv_rst ), 
        .w(nttinv_w),  
        .w_hat(nttinv_w_hat),  
        .done(nttinv_done)  
    ); 
     
    Power2round #(  
            .T_WIDTH(64)  
        ) uut (  
            .t(power2round_t),  
            .t1(power2round_t1),  
            .t0(power2round_t0)  
        ); 
         
    PkEncode PkEncode (  
                .clk(clk),  
                .reset(pk_rst),  
                .rho(pkencode_rho),  
                .t1(pkencode_t1),  
                .pk(pk),  
                .valid(pk_done)  
            );             
    sponge #(  
                    .msg_len(20740),  
                    .d_len(512),  
                    .capacity(512)  
                ) shake256_compute_tr (  
                    .clk(clk),  
                    .reset(shakeRst),  
                    .start( shakeStart),  
                    .message({4'b1111, shakeIn2}),  
                    .z(shakeOut2),  
                    .done(shakeDone2)  
                ); 
skEncode #(  
                          
                        .cols_l(l),  
                        .rows_k(k),  
                        .n(eta),  
                        .d(d)  
                    ) dut (  
                    .clk(clk),  
                    .rst(sk_rst),  
                        .rho(shakeOut[255:0]),  
                        .K(shakeOut[1023:76 8]), 
                        .tr(shakeOut2),  
                        .s1(s1),  
                        .s2(s2),  
                        .t0(sk_t0),  
                        .sk(sk),  
                        .done(final_done)  
                    );                 
endmodule  
 
 
52  
  
7.2.

Component  Diagram  
The following component diagram presents the modular architecture of the Athestia system,  
highlighting  the integration  of post-quantum  cryptography  using  CRYSTALS - Dilithium within a 
Named Data Networking (NDN) framework. Figure  7.1 Component  Diagram  of Athestia

53  
 Figure 7.1 illustrates that the architecture is split across thre e core domains: the NDN Emulator, the 
Dilithium cryptographic hardware system, and the UART -based communication interface that links 
them. On the NDN side, the emulator replicates a complete NDN -based communication model. The 
Certificate Authority component is responsible for generating the root public -private key pair and 
signing the producer’s public key to enable trust -based communication. The Producer  Site includes  
modules  to generate  its own key pair (using the hardware engine), sign the data p ackets with the 
private key, and produce NDN - compliant data packets. These packets are then sent through the 
NDN Router, which mimics real -world routing of interest and data packets. The Consumer Site 
handles incoming  data,  starting  with sending  an Intere st packet and  later verifying  the received data 
using the producer’s public key and the Dilithium Verify module.

The Athestia block in the bottom -left corner shows the core cryptographic hardware engine deployed 
on FPGA. It includes three separate modules:  the Dilithium Key Module for key generation, the 
Dilithium Signature Module for signing packets, and the Dilithium  Verify  Module for checking the 
authenticity  of incoming content. These modules are designed in SystemVerilog and implement 
algorithms aligne d with the Dilithium specification. They are optimized to be lightweight and 
efficient, ensuring real -time performance. The UART Driver serves as the communication bridge between the Python frontend and the FPGA 
backend. It handles hardware -to-software int erfacing and allows the main GUI program to send 
specific commands to the hardware such as “Generate Keys”, “Sign”, or “Verify”. In response, the 
UART driver receives cryptographic results, such  as the public key, signed data, or verification  
outcomes, and  passes them back to the frontend for further use in the NDN simulation. The overall data flow begins with the generation of keys on the hardware, which are then utilized by 
the Producer component to sign data. These signed packets are sent over  the NDN  network,  received  
by the Consumer,  and finally  verified  using  the public key.

All  these  cryptographic  operations  are 
offloaded  to the hardware  module,  with the software  stack  handling  packet  formatting  and routing. This structure  demonstrates  a secure, lightweight, and modular architecture capable of  resisting 
quantum -era threats in a named data networking context. 54  
 7.3 Deployment  Diagram  
 
Figure  7.3 Deployment  Diagram  
 
Figure 7.3 represents the physical architecture of the Athestia system, depicting how  different  
software  and hardware  artifacts  are distributed  across  two main  environments: the FPGA platform and 
the NDN Emulator on a host machine. On the Dilithium  side, the system  includes  four key compiled  artifacts  (`.bit`  files),  each responsible 
for a  specific cryptographic operation. The Key Module handles the generation  of public -private key  
pairs based on  the Dilithium  post-quantum  algorithm. The Signature Module is responsible for 
signing data using the generated private key, while the Verify Module performs signature validation 
using the public key. Additionally, a UART protocol module is deployed to manage serial 
communication between the FPGA and the host machine. These hardware components are written in 
SystemVerilog  and are synthesized  into `.bit`  files before  being  deployed  on the FPGA. The interface  file.c  acts as the communication  bridge  between  the FPGA  hardware  and the  NDN  
Emulator  software.

This C file handles  sending  commands  and receiving  data through the UART 
protocol, providing a well-defined hardware -software interface. It ensures that operations such as key 
generation, signing, and verification can be triggered from the software environment and executed on 
the hardware. On the NDN Emulator side, the system ru ns the core components of a Named Data Networking  
environment. This includes  the NDN  Router,  which  routes  interest  and data packets  between  nodes,

55  
 the Certificate  Authority,  which  signs  and distributes  producer certificates, the Producer, which 
generates and signs data packets, and the Consumer, which sends interest packets and verifies 
received data. These components are implemented in Python, and it interacts with the C interface to 
control the FPGA. This deployment  setup  ensures  that all cryptographic  operations  are offloaded  to secure, tamper -
resistant hardware, while the flexible NDN logic and user interaction are managed in the software 
domain. This separation of concerns improves both system security and performance. 56  
 8. Testing  
 
This chapter presents a comprehensive evaluation of the Dilithium hardware implementation 
integrated with  the Named Data Networking (NDN) architecture. The implementation was 
thoroughly tested for correctness, and compliance with the FIPS 204 standard for post-quantum  
digital signatures.

The testing strategy includes white - box testing of internal modules, black -box 
testing of the system’s external interfaces, and system -level simulations conducted within an NDN 
environment. A detailed test plan is outlined , followed by results and analysis. Compliance with the FIPS 204 standard (standard for NIST Post -Quantum Cryptography) was 
thoroughly verified using official test cases. Furthermore, the integration  of this cryptographic  
scheme into  the NDN  protocol  was evaluated  through simulation -based experiments to analyze its 
effects on protocol behavior and overall system performance. 8.1. TESTING  METHODS  
To validate the correctness of the Dilithium hardware module integrated with the Named Data 
Networking (NDN), two primary  testing methodologies were employed:  
● white -box testing  
● black -box testing  
These  complementary  approaches  ensured  thorough  verification  from  both the internal logic and 
external behavior perspectives. The aim was to detect design flaws early, verify functional 
compliance with the FIPS 204 standard, and evaluate system -level behavior under realistic and edge -
case scenarios. 8.1.1. White -box testing:  
White -box testing, also known as structural  or glass -box testing, is a thorough testing approach  that 
examines the internal  workings of  a system.

For  the Dilithium  hardware module, this method was  
used to validate each  component against the NIST  FIPS 204 specification. With full access to the 
source code and system  design, testers were able to rigorously assess the  correctness of individual 
functions and logic paths. Key cryptographic operations —such as the Number Theoretic Transform 
(NTT), polynomial  expansion,  and bit-packing —were  tested  to ensure  accurate  and secure  
57  
 implementation. Modules  like ExpandA,  ExpandS,  RejNTTPoly,  and RejBoundedPoly were 
specifically  verified to confirm  proper behavior  when  transforming and rejecting polynomials. The testing extended to key handling operations, where modules for encoding and decoding public 
and pri vate keys (PK Encode/Decode and SK Encode/Decode) were validated for secure and 
accurate functionality. These tests ensured that key material was  correctly  packed  and unpacked  
without  compromising  system  security. Additional testing covered auxiliary compo nents like 
polynomial decomposition (Decompose), sampling in the ball (Sample in Ball), and bit -packing of 
hints (Hint Bit Pack), confirming  that all operations  met the performance  and security  requirements. Overall, white -box testing played a critical rol e in verifying the structural integrity and correctness of 
the Dilithium hardware module. 8.1.1.1.

Unit  Testing  
Unit testing  was used to test each  function  or sub-module  in isolation. The following table 
summarizes the unit tests, detailing the input, expected and actual  outputs, and pass/fail status.

Table  8.1.1.1   Unit Testing  
 
S.No  Test Case Input  Expected 
Output  Actual 
Output  PASS/FAIL  
1 Expand  A rho byte 
string  Matrix A 
with 256 
coefficients  Matrix A 
with 256 
coefficients  Pass 
2 RejNTTPoly  byte string  polynomial 
with 256 
coefficients  polynomial 
with 256 
coefficients  Pass 
3 Coefficientfro 
mthreebytes  3 bytes  Integer  Integer  Pass 
4 Expand  S rho_prime 
byte string  vectors of 
polynomial  vectors of 
polynomial  Pass 
5 RejBoundedPol 
y byte string  polynomial 
with 256  
coefficients  polynomial 
with 256  
coefficients  Pass 
6 Coefficientfro 
mhalfbytes  half byte Integer  Integer  Pass 
7 NTT  Polynomial  NTT  
transformed 
output  verified 
with known 
results  Pass 
58  
 8 NTT_inverse  NTT  
polynomial  Original 
polynomial  Accurate 
inverse 
transformati 
on Pass 
9 Power2round  Integer  a (a1, a0) pair matches  Pass 
10 Pk Encode  rho, t1 
polynomial  public  key 
byte string  matches 
standard  Pass 
11 Simple  Bit 
Pack  polynomial  byte string  matches  Pass 
12 Sk Encode  rho,K,tr,s1&s 
2vectors, 
t0vectors  secret key 
byte string  matches 
standard  Pass 
13 Bit Pack polynomial  byte string  byte string 
matches  Pass 
14 Sk Decode  secret key 
byte string  rho,K,tr,s1 
&s2vectors, 
t0vectors  matches  Pass 
15 Bit Unpack  byte string  polynomial  polynomial  Pass 
16 Expand  Mask  rho , mu vector  y matches  Pass 
17 High  Bits Integer  r r1 r1 Pass 
18 Decompose  Integer  r (r1, r0) pair matches  Pass 
19 w1 Encode  w1 vectors  byte string  byte string  Pass 
20 Sample  In Ball byte string  polynomial  matchs  Pass 
21 Low Bits Integer  r r0 r0 Pass 
22 Make  Hint z and r 
vectors  hint vectros  hintvectors  Pass 
23 Sig Encode  c polynomial, 
z vectors, h 
vectors  signature 
byte string  signature 
byte string  Pass 
24 Hint Bit Pack h vectors  byte string  byte string  Pass 
25 Pk Decode  public  key 
byte string  rho, t1 
vectors  rho, t1 
vectors  Pass 
26 Simple  Bit 
Unpack  byte string  w vectors  matches  Pass 
59  
 27 Sig Decode  signature 
byte string  c 
polynomial, 
z vectors, h 
vectors  matches  Pass 
28 Hint Bit 
Unpack  byte string  h vectors  h vectors  Pass 
29 Use Hint h, w’approx 
vectors  w1 prime 
vectors  matches  Pass 
 
 
8.1.1.2.

Integration  Testing  
Integration testing ensures that independently developed modules work together as expected 
when integrated. These tests verified the full cryptographic lifecycle of key generation, signing, 
and signature verification using both reference and dynamically generated inputs. Table  8.1.1.1   Integration  Testing  
 
S.No  Test Case Input  Expected 
Output  Actual 
Output  PASS  
/FAIL  
1 Key 
Generation  Seed, 
parameters  Valid  Key Pair 
(sk, pk)  Match  with 
standard  Pass 
2 Signature 
Generation  Message  + sk Valid  signature 
sig Match  with 
standard  Pass 
3 Signature 
Verification  (pk, message, 
sig) Accept  (Valid)  Output:  1 
(true)  Pass 
4 Signature 
Verification  (pk, message, 
corrupted_sig)  Reject (Invalid)  Output:  0 
(false)  Pass 
60  
 8.1.1.3.

System  Testing  
 
Table  8.1.1.1  System  Testing  
 
SN 
O TEST CASE  INPUT  EXPECTED 
OUTPUT  ACTUAL 
OUTPUT  PASS/ 
FAIL  
1 NDN Data 
Packet 
Signing  Test Data  packet  + 
Private Key  Signed  data 
packet  Packet was 
signed and 
accepted  by 
NDN node  Pass 
2 NDN  
Signature 
Verification 
Test Signed  packet  
+ Public  Key Validity  result 
(authentic or 
not) Signature 
verified  within 
NDN router  Pass 
3 Unsupported 
Security 
Level 
Handling  Request to 
generate  keys 
or sign using 
level 2 or 3  System  should 
reject or not 
support  level  2 
and 3 security 
levels  Level 2 and 3 
options not 
implemented  or 
rejected 
appropriately  Fail 
4 Unsupported 
NIST Test 
Case 
Parameters  NIST test 
vector with 
unsupported 
params (e.g.,  
preHash  ≠ 
"pure", 
different 
tgId)  System  should 
reject  or report 
unsupported 
parameter set  System fails to 
handle 
unsupported  test 
cases; 
unsupported 
configs not 
processed  Fail 
 
8.1.2. Black -box testing  
Black -box testing was conducted to assess the Dilithium hardware module's external behavior  
without  considering  its internal  structure. This type of testing  was instrumental in verifying that the 
module functioned correctly from the end -user or system integration  perspective.

The goal  was to 
validate the overall behavior, conformance to the NIST FIPS 204 standard, and integrate with 
external systems such as the Named Data  Networking  (NDN). The testing  focused  on the input - 
output  relationship  of key cryptographic o perations like key generation, signature generation, and 
signature verification. 61  
 The Key Generation Test validated  the correctness  of the generated key  pairs. Public and private 
keys were generated by the hardware module and then subje cted to statistical and structural checks to 
ensure they adhered to the constraints set by the Dilithium specification. These checks included 
confirming proper polynomial size, randomness of coefficients, and proper encoding formats. This 
test was critical  in confirming  that the hardware  could  consistently  produce  secure  key material  usable  
for subsequent signature operations. The Signature Generation and  Verification Tests were used  to verify  the functional correctness  of 
digital  signing  and authentication  workflows. Known  test messages  were signed  using  the generated  
private  key, and the resulting  signatures  were  verified  using the  corresponding  public  key. These  
operations  were  performed  across  various  message sizes  and key instances  to ensure  repeatability  and 
reliability.

Importantly,  the test cases ensured that only correctly signed messages were accepted 
during verification, and invalid or tampered messages were properly rejected, thereby validating the 
integrity of the cryptographic logic i n the hardware implementation. The NDN Integration Test extended the scope of functional testing to assess interoperability with 
the NDN framework. The test ensured that data packets signed with  Dilithium  could  be embedded 
into NDN  interest and  data packets  and transmitted through  the NDN network. Signature verification 
was performed at the consumer side to validate the authenticity of the content. This integration 
scenario simulated real - world data flow, validating both performance and security unde r network 
conditions. The success of this test confirmed that the hardware module not only functioned correctly 
in isolation but also integrated seamlessly into a secure NDN -based communication system.

Table  8.1.2  Black -box testing  
 
SNO  Test Case 
Description  Input  Expected 
Output  Actual 
Output  Status  
1 Validate 
Dilithium 
Key Pair in 
NDN  Public  and 
Private 
Keys  from 
hardware  Keys 
accepted  by 
NDN  Keys 
successfully 
integrated  PASS  
2 Sign NDN 
Data  Packet 
with 
Hardware 
Key Data  Packet  
+ Hardware 
Private  Key Signed  data 
packet  Packet  signed 
correctly  PASS  
62  
 3 Verify 
Signature  at 
Consumer 
Node  Signed 
Packet + 
Hardware 
Public  Key 
of CA  Signature 
verified  Verified 
successfully 
at consumer  PASS  
4 Reject 
Signature 
with 
Mismatche 
d Public 
Key Signed 
Packet + 
Wrong 
Public  Key Verification 
failure  Signature 
rejected  as 
expected  PASS  
5 End-to-End 
Packet 
Transfer 
with 
Verification  Signed 
Packet  → 
NDN  
Forwarding 
Path Consumer 
receives 
and verifies 
signature  Round -trip 
successful 
with valid 
signature  PASS  
6 Signature 
Fails on 
Improper 
Key Format  Signed 
Packet + 
Incomplete 
Public  Key Verification 
failure  Correctly 
failed due to 
improper  key 
format  PASS  
7 Handling 
Multiple 
components 
in 
Advanced 
Topology  Topology 
with >3  
CAs,  2 
Producers, 
10 
Consumers, 
and 10 
Routers  GUI should 
display and 
process  data 
from all 
components 
correctly  GUI displays 
and processes 
only 2 
Producers; 
others  are not 
shown or 
ignored  FAIL  
63  
 9.

Discussion  
The project titled Athestia addresses a critical emerging challenge in computer networking: securing 
data in a post -quantum world. As quantum computing becomes more  plausible,  it poses  a significant  
threat  to classical  cryptographic  schemes  like RSA and ECC, which underpin most secure digital 
communication today. Our solution introduces Dilithium, a lattice -based digital signature algorithm 
selected by NIST for post -quantum  cryptographic  standardization,  integrated  into a Named  Data  
Networking (NDN) architecture using a hardware -accelerated FPGA platform. 9.1. Core  Contributions  and Impact  
The core  objective of  this project was  to develop a  practical  and secure framework for digital 
communication resistant to quantum -based cryptographic attacks. This was achieved by:  
 Designing and implementing a hardware accelerator for  Dilithium in SystemVerilog, 
ensuring fast and reliable key generation, signing, and verification operations.  Creating a communication bridge between the accelerator and the MiniNDN framework via 
the UART protocol, enabling real -time cryptographic tasks in  simulated NDN environments.  Modifying the self -certifying packet mechanism in NDN to use Dilithium signatures, thereby 
enhancing data integrity and authentication within a decentralized, data -centric architecture. 9.2.

Technical  Feasibility  and Evaluation  
Our implementation proved that deploying lattice -based cryptography on hardware is not  only 
feasible  but also efficient  when  carefully  optimized. The Dilithium  accelerator was able to generate 
keys, sign messages, and verify signatures with notable speed c ompared  to software -only methods. Integration  with MiniNDN  allowed  the simulation of real -world NDN traffic, demonstrating how 
secure, quantum -resistant communications can be established and maintained. The performance of the accelerator was evaluated agai nst the FIPS 204 test vectors, ensuring  
conformance  to recognized  cryptographic  standards. Additionally,  our testbench supported white -
box and black -box testing, helping verify individual modules (e.g., ExpandA, NTT, Decompose) as 
well as the entire pipeline. 9.3. System  Integration  and Interoperability  
A critical part of this project was ensuring seamless interoperability between the Python -based  
MiniNDN  simulation  and the SystemVerilog -based  hardware  core. This required careful  attention to 
timing, buff ering, and formatting of messages exchanged over UART. Moreover, since NDN  
 
64  
 fundamentally differs from traditional IP -based models —prioritizing data over location, special 
effort was required to preserve the semantics of self -certifying packets using Dili thium.

The certificate  authority  (CA)  module  was also emulated  in the MiniNDN  environment, responsible 
for certifying producer public keys. Consumers then validated incoming data  using  the producer's  
certificate  and signature,  ensuring  a complete  trust chain —all simulated securely using the custom 
cryptographic accelerator. 9.4. Challenges  Faced  
Despite the successful execution of our design goals, we encountered several challenges:  
 Resource  Constraints  on FPGA:  Lattice -based  algorithms  require  polynomial arithmetic, 
modular reductions, and transformations like NTT, which are resource -intensive. Optimizing 
memory usage and computation pipeline was critical.  Bit-Level Debugging: Debugging SystemVerilog modules dealing with polynomial bit -
packing ( e.g., skEncode) was particularly tedious and required GTKWave traces and formal 
verification of intermediate states.  Integration Complexity: Ensuring the correct handshake, timing, and synchronization  
between  software  modules  (Python)  and hardware  logic  proved to be more intricate than 
initially anticipated. 65  
 10. Conclusion  
The rapid evolution of quantum computing represents both a technological milestone and a critical 
challenge to current digital security paradigms. Classical cryptographic algorithms,  once  considered  
unbreakable,  are now at significant  risk due to advances in quantum algorithms such as Shor’s and 
Grover’s.

Against this backdrop, our project, Athestia: A Clean Slate Application using Named Data 
Networking (NDN) with Dilithium, serves as a timely and vital exploration into future -proofing 
digital communication infrastructures. This project successfully demonstrates the integration of post -quantum cryptographic techniques, 
specifically the Dilithium digital signatu re scheme, into a Named Data Networking  architecture  via 
the UART  communication  protocol. It provides  a working prototype  that combines  software  and 
hardware  domains  to address  real-world  concerns around data integrity, authentication, and quantum 
resistance. The decision to implement the Dilithium  algorithm  in hardware using SystemVerilog and 
deploy  it on an FPGA platform not only enhanced the speed and security of cryptographic operations 
but also provided practical insights into the performance a nd design trade - offs inherent to hardware -
based cryptographic accelerators. Importantly, Athestia is designed to be modular and extensible, enabling future researchers to build 
upon it. The hardware accelerator can be adapted for other post - quantum algor ithms; the 
communication interface can be replaced with higher - throughput protocols; and the simulated NDN 
environment can be scaled to more complex, realistic topologies.

To conclude, this project has proven  the feasibility and practicality  of implementi ng a quantum -
resistant, hardware -accelerated cryptographic solution in a next -generation networking framework. It 
provides a strong foundation for future research and development in  secure  communications. The 
insights  gained, and  the system  developed, represent  a significant  contribution  to the field of post-
quantum  secure  network  design. As quantum  computing becomes a reality, solutions like Athestia 
will be instrumental in safeguarding the digital world. 66  
 11. Future  Work  
While Athestia lays a strong foundation for integrating post -quantum cryptographic signatures  into 
Named  Data  Networking  (NDN),  it also opens  the door for a wide  range of  future  enhancements  and 
research  directions. This project focused  on authentication and  data integri ty using  Dilithium,  a post-
quantum  digital  signature  scheme. However, ensuring confidentiality and secure key exchange is 
equally important in secure communication systems. 11.1. Integration  of Kyber  for Secure  Key Exchange  
Our next major goal is to integrate Kyber, a lattice -based Key Encapsulation Mechanism (KEM) 
selected by NIST for post -quantum public -key encryption. While Dilithium  provides digital  
signatures, Kyber will  enable secure key  establishment and confidential data exchange within NDN 
by encryptin g content or symmetric keys.

This integration  will allow:  
 End-to-end encryption  of content  packets  in NDN.  Mutual authentication and secure session setup between producers and consumers.  Deployment  of hybrid  encryption  schemes  using  Kyber  (for key exchange)  and AES (for data 
payload encryption). We plan to implement Kyber’s encapsulation and decapsulation modules in hardware alongside 
Dilithium  and explore secure key  negotiation  protocols adapted to  the NDN architecture. 11.2. Real -World  Deployment  and Evaluation  
We also plan to deploy  the complete  cryptographic  NDN  system  in a multi -node  testbed  
 Real-time latency  and throughput.  Packet overhead  introduced by  post-quantum  cryptography.  Scalability  with large  numbers  of producers/consumers. Such experiments will validate the practical viability  of our system  and help optimize parameters for 
field use. 67  
 12. Achievement  
Participation  in CAMP -V Event  by RISC -V at MERL -UIT 
 
● Event: CAMP -V (Creative Applications for Microprocessor Platforms - Virtual) 
organized by  the RISC -V community at the MERL (Microelectronics Research Lab) at 
Usman Institute of Technology. ● Experience: Presented  the concept and initial  implementation  of the Dilithium accelerator 
integrated with the NDN protocol for secure communication. ● Outcome:  
○ Received valuable feedback from  experts  in microprocessor  design  and post -
quantum cryptography.

○ Gained insights into further optimizing the accelerator for real -world deployment. ● Evidence:  
○ Presentation  slides  and photographs  from  the event. ○ Acknowledgment  from  event  organizers  for participation     
 
68  
 13. Appendices  
Annex  A: Acknowledgements  
1. Inst it utional  Support  and Event  Participation  
o Usman Institute of Technology  (UIT): We gratefully acknowledge  the support and facilities 
provided by UIT throughout the development of our Final Year Project. The guidance from 
faculty members and access to research resources were instrumental in completing our work. o Microelectronics  Research  Lab (MERL -UIT): MERL  provided a collaborative environment 
that supported hardware experimentation, especially in FPGA - based cryptographic 
implementations. We appreciate the lab's mentoring and provision of technical resources. o Participation  in RISC -V CAMP -V: Our team  had the opportunity  to present  the project at the 
RISC -V CAMP -V event. This platform enabled us to share our innovation, gather feedback 
from experts, and gain valuable exposure to advancements in secure embedded systems and 
post-quantum cryptography. Annex  B: Organization  Overview  
 
1.

About  Usman  Institute  of Technology  (UIT) : 
○ Institution  Overview:  
Usman Institute of Technology (UIT), affiliated with NED University of  Engineering and 
Technology, is  a leading institution  offering degree programs in computer science, electrical 
engineering, and related disciplines. UIT is committed to fostering academic excellence and 
practical innovation in the field of engineering and technology. ○ Vision  and Mission:  
The vision of UIT is to produce highly competent professionals equipped to lead in their 
respective fields. Its mission is to provide quality education and foster an environment 
conducive to learning, research, and innovation. ○ Contribution  to Final  Year  Projects:  
UIT encourages applied research and hands -on projects at the undergraduate level. The 
institute provides access to laboratories, faculty mentorship, and resources required for 
students to explore emerging technologies such as post -quantum cryptography, embedded 
systems, and secure communication. 69  
 2. Microelectronics  Research  Lab (MERL) : 
○ Overview:  
The Microelectronics  Research  Lab (MERL) is  a research  group  at UIT focused on 
embedded systems, FPGA development, digital hardware design, and microprocessor 
architectures. The lab provides both theoretica l and practical exposure to students interested 
in advanced hardware development.

○ Role  in the Project:  
MERL provided technical resources such as FPGA boards, simulation software, and  expert 
guidance  that supported  the implementation of  the Dilithium cryptographic accelerator. It 
served as the primary environment for hardware prototyping and testing during the course of 
the project. Annex  C: Background  and Literature  Review  
 
1. Key Research  Papers : 
○ “NAC: Name -Based Access Control in Named Data Networking ” – Zhiyi  Zhang  et al. : This 
seminal  paper  explores  a scalable  access  control mechanism within NDN. It inspired our 
approach to secure content naming and policy enforcement in Athestia. ○ Lattice -Based Cryptography & Dilithium: We studied the NIST PQC standa rds and multiple 
academic papers highlighting the resilience of Dilithium against quantum attacks. This 
literature shaped our algorithmic and architectural decisions. 2. Details  of Similar  Projects : 
○ We reviewed multiple research projects combining PQC with content - centric networking. But to the best of our knowledge, we did not find their integration. Hence we explore some 
dilithium implementations. 3. UML  Diagrams : 
○ Detailed UML diagrams are presented to model  the system’s structure, including the 
interaction between the NDN routing layer, content signature modules, and the Dilithium 
accelerator.

70  
 Annex  D: Hardware  and Software  Analysis  
 
1. Hardware  Specifications : 
○ Arty A7 FPGA Board: Xilinx Artix -7 FPGA with thousands of logic cells, supporting  
Vivado  Design Suite. Suitable for lightweight cryptographic accelerators and interfacing 
with serial/IP networks. 2. Detailed  Requirements  Document : 
○ Use Case Narrations: We defined key user scenarios, including NDN router behavior when 
handling signed Interests and  Data packets. ○ Functional  & Non-Functional  Requirements:  
○ Latency  targets  for signing/verification. ○ Compatibility  with SHAKE -256 hash functions. Annex  E: Software  Design  and Modeling  
 
1. Detailed  Design  Documents : 
○ System -Level Architecture: Illustrates the layering of the Athestia platform —from user -
facing applications to NDN routers and PQC verification engines. ○ Modular FPGA Design: The Dilithium core is split into modules for keygen,  signing,  and 
verification,  each synthesizable  independently  and reusable across projects. ○ Flowcharts: We included step -by-step diagrams of data signing/verification for both user 
requests and content producers. Annex  F: Software  and Hardware  Algorithms  
 
1. Dilithium  Algorithm  Details : 
○ Pseudocode: Full pseudocode is provided for all three critical phases: KeyGen, Sign, and 
Verify, formatted  in a hardware -friendly manner to aid future HDL translation.

○ Technical References: Algorithms are aligned with the FIPS 204 standard and the 
CRYSTALS -Dilithium documentation by the NIST PQC team. Annex  G: Achievements  
 
1. Correspondence : 
○ Mentorship  Notes:  Feedback  from  technical  mentors  during  the CAMP -V event  was also 
recorded  to help refine  our FPGA  optimization  strategies. 71  
 Annex  H: Plagiarism  Report  
 
 
 

72  
 References  
 
[1]       National  Institute  of Standards  and Technology, Post -Quantum  Cryptography:  ML-DSA  
(FIPS  204),  Gaithersburg, MD, USA:  U.S. Department  of Commerce , 2024  
 
[2] Hidouri, Abdelhak, et al. "A survey on security attacks and intrusion detection mechanisms 
in named data networking." Computers 11.12 (2022): 186. [3] Soni, Deepraj, et al. "Crystals -dilithium." Hardware Architectures for Post - Quantum Digital 
Signature Schemes (2021): 13 -30. [4] Budiana, Mochamad Soebagja, et al. "Impact of  the Content Store Scaling toward the LRU 
and FIFO Cache Replacements on NDN using Mini -NDN." 2021 15th International Conference on 
Telecommunication Systems, Services, and Applications (TSSA). IEEE, 2021. [5] Ma, Xinyu, Alexander Afanasyev, and Lixia Zhang. "A type -theoretic model on ndn-tlv 
encoding." Proceedings of the 9th ACM Conference on Information -Centric Networking. 2022. [6] Yan, Lianglin, Ming Luo, and Mingsheng Wang. "Speedup signing pre -rejection  sampling  
towards  dilithium."

Cybersecurity  8.1 (2025):  10. [7] Z. Zhang et al., "An Overview of Security Support in Named Data Networking," in  IEEE 
Communications Magazine, vol. 56, no. 11, pp. 62 -68, November 2018, doi: 
10.1109/MCOM.2018.1701147. [8] Nour,  Boubakr,  et al. "Access  control  mechanisms  in named  data networks:  A 
comprehensive survey." Acm computing Surveys (cSuR) 54.3 (2021): 1 -35. [9] Nichols,  Kathleen. "Trust  schemas  and icn: key to secure  home  iot." Proceedings  of the 8th 
ACM Conference on Information -Centric Networking. 2021. [10] Ricci, Sara, et al. "Implementing CRYSTALS -Dilithium signature scheme on FPGAs." Proceedings  of the 16th  International  Conference on  Availability, Reliability and Security. 2021. 73  
  
[11] Truong,  Quang  Dang,  Phap  Ngoc  Duong,  and Hanho  Lee. "Efficient  Low-Latency Hardware 
Architecture for Module -Lattice -Based Digital Signature Standard." IEEE Access (2024). [12] Land, Georg, Pascal Sasdrich, and Tim Güneysu. "A hard crystal -implementing dilithium on 
reconfigurable hardware." International Conference on Smart Card Research  and Advanced 
Applicati ons. Cham:  Springer International  Publishing, 2021. [13] Zhao, Cankun, et  al. "A  compact and  high-performance  hardware  architecture  for 
CRYSTALS -Dilithium." IACR Transactions on Cryptographic Hardware and Embedded Systems 
(2022): 270 -295. [14] Aikata, Aikata, et al. "KaLi: A  crystal  for post -quantum  security  using Kyber and 
Dilithium."

IEEE  Transactions  on Circuits  and Systems  I: Regular  Papers 70.2  (2022): 747-758. [15] Phan, Quoc Bao, et al. "Enhancing Data Security in Federated Learning with Dilithium." 2025 IEEE I nternational Conference on Consumer Electronics (ICCE). IEEE, 2025. [16] Bandara, Harshana, et al. "On advances of lattice -based cryptographic schemes and their 
implementations." Cryptography 6.4 (2022): 56. [17] Hu, Xiao,  et al. "AC-PM: An area-efficient  and configurable  polynomial  multiplier for lattice  
based  cryptography." IEEE  Transactions  on Circuits  and Systems  I: Regular Papers 70.2 (2022): 719 -
732. [18] Afanasyev, Alexander, Ilya Moiseenko, and Lixia Zhang. "ndnSIM: NDN simulator for 
NS-3." (2012). [19] Yuan, Haowei, Tian Song, and Patrick Crowley. "Scalable NDN forwarding: Concepts, 
issues and principles." 2012 21st International Conference on computer communications and 
networks (ICCCN). IEEE, 2012. [20] Mastorakis, Spyridon, Alexander Afanasyev, and  Lixia  Zhang. "On the evolution of 
ndnSIM: An open -source simulator for NDN experimentation." ACM SIGCOMM Computer 
Communication Review 47.3 (2017): 19 -33. Elite Dynamics Partners
Comprehensive Organizational Policies
Effective Date: January 1, 2024
Version: 3.6
Confidential Document - For Internal Use Only
This document contains proprietary information and policies of the organization. Table of Contents
1. Company Overview
2. Human Resources Policies
3.

Information Technology Policies
4. Code of Conduct
5. Data Protection & Privacy Policies
6. Appendices
1. Company Overview
Elite Dynamics Partners was founded in 2010 and has grown to become a leading 
organization in the Retail & E-commerce sector. With approximately 4250 employees 
worldwide, we are committed to excellence, innovation, and ethical business practices. Our mission is to deliver exceptional value to our clients while maintaining the highest 
standards of integrity and professionalism. This document outlines the policies and 
procedures that guide our operations and define our organizational culture. Core Values:
- Integrity and Ethical Conduct
- Innovation and Continuous Improvement
- Customer Focus and Satisfaction
- Employee Development and Well-being
- Social Responsibility and Sustainability
Organizational Structure:
The company operates with a matrix structure that promotes collaboration across 
departments while maintaining clear lines of authority and accountability. 2. Human Resources Policies
2.1 Employment Policies
All employment decisions are based on merit, qualifications, and business needs. The organization prohibits discrimination based on race, color, religion, sex, 
national origin, age, disability, or any other protected status. Probation Period: New employees undergo a 90-day probation period with 
performance evaluations at 30, 60, and 90 days.

Working Hours: Standard working hours are 9:00 AM to 5:00 PM, Monday through 
Friday, with flexibility arrangements available based on role requirements. 2.2 Compensation and Benefits
The organization offers competitive compensation packages including:
- Base salary reviewed annually
- Performance-based bonuses
- Comprehensive health insurance
- Retirement savings plan with company matching
- Paid time off and holidays
- Professional development opportunities
Salary bands are determined based on market research, role requirements, 
and individual qualifications. 2.3 Leave Policies
Vacation Leave: Employees accrue 15 days annually, increasing with tenure. Sick Leave: 10 days per year with proper documentation. Parental Leave: 12 weeks paid leave for primary caregivers. Emergency Leave: Available for family emergencies with manager approval. All leave requests must be submitted through the HR portal with appropriate 
advance notice when possible. 3. Information Technology Policies
3.1 Acceptable Use Policy
Company IT resources are provided for business purposes.

Employees must:
- Use strong, unique passwords and enable multi-factor authentication
- Report any security incidents immediately
- Avoid downloading unauthorized software
- Refrain from accessing inappropriate content
- Protect sensitive information when working remotely
Monitoring: The organization reserves the right to monitor IT resource usage 
to ensure compliance with policies and protect company assets. 3.2 Data Classification and Handling
Data is classified into four categories:
1. Public: Information approved for public release
2. Internal: General business information
3. Confidential: Sensitive business information
4. Restricted: Highly sensitive information requiring special handling
Each classification level has specific handling, storage, and transmission 
requirements that employees must follow. 4. Code of Conduct
All employees are expected to adhere to the highest ethical standards in their 
professional conduct. This includes:
- Acting with integrity and honesty in all business dealings
- Avoiding conflicts of interest and disclosing potential conflicts
- Protecting company assets and using them responsibly
- Maintaining confidentiality of proprietary information
- Treating colleagues, clients, and partners with respect and dignity
- Complying with all applicable laws and regulations
Violations of the code of conduct may result in disciplinary action, up to and 
including termination of employment.

Reporting Mechanisms:
Employees can report concerns through their manager, HR department, or the 
anonymous ethics hotline. The organization prohibits retaliation against 
individuals who report concerns in good faith. 5. Data Protection & Privacy Policies
Elite Dynamics Partners is committed to protecting the privacy and security of 
personal data in accordance with applicable data protection laws. Data Protection Principles:
- Lawfulness, fairness, and transparency in data processing
- Purpose limitation: Data collected for specified, legitimate purposes
- Data minimization: Collecting only necessary data
- Accuracy: Keeping data accurate and up-to-date
- Storage limitation: Retaining data only as long as necessary
- Integrity and confidentiality: Implementing appropriate security measures
- Accountability: Demonstrating compliance with data protection principles
Data Subject Rights:
Individuals have rights regarding their personal data, including access, 
rectification, erasure, and data portability. Requests should be submitted 
to the Data Protection Officer. International Data Transfers:
When transferring data internationally, the organization ensures adequate 
protection through appropriate safeguards such as Standard Contractual Clauses. 6.

Appendices
Appendix A: Emergency Contact Information
Appendix B: Department-Specific Policies
Appendix C: Forms and Templates
Appendix D: Policy Acknowledgment Form
Appendix E: Revision History
This document is reviewed annually and updated as necessary to reflect changes in laws, regulations, and business
practices. The latest version is always available on the company intranet.

